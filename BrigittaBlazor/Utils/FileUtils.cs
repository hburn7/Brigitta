using BanchoSharp.Interfaces;
using BrigittaBlazor.Extensions;
using Humanizer;
using Humanizer.Localisation;
using Microsoft.JSInterop;
using System.Text;

namespace BrigittaBlazor.Utils;

public static class FileUtils
{
	/// <summary>
	///  Downloads a file to the browser
	/// </summary>
	/// <param name="js"></param>
	/// <param name="filename">The name of the file with extension</param>
	/// <param name="data"></param>
	public static async Task DownloadAs(IJSRuntime js, string filename, byte[] data) => await js.InvokeVoidAsync(
		"saveAsFile",
		filename,
		Convert.ToBase64String(data));
	
	public static async Task SaveChatHistoryAsync(IChatChannel currentChannel, bool displayUTC, IJSRuntime js)
	{
		var timeDelta = currentChannel.MessageHistory!.Last!.Value.Timestamp -
		                currentChannel.MessageHistory.First!.Value.Timestamp;

		var sb = new StringBuilder($"---- Chat log of {currentChannel.ChannelName} generated by Brigitta ----\n");
		var ts = displayUTC ? currentChannel.MessageHistory!.First!.Value.Timestamp.ToUniversalTime() : currentChannel.MessageHistory!.First!.Value.Timestamp;
		sb.AppendLine($"---- Log spans {timeDelta.Humanize(3, minUnit: TimeUnit.Second)}, " +
		              $"beginning at {ts:R}{ts:zz} ----");

		sb.AppendLine("---- BEGIN LOG ----");
		foreach (var ircMessage in currentChannel.MessageHistory!)
		{
			if (ircMessage is not IPrivateIrcMessage message)
			{
				continue;
			}

			if (displayUTC)
			{
				sb.AppendLine(message.ToUTCDisplayString());
			}
			else
			{
				sb.AppendLine(message.ToDisplayString());
			}
		}

		sb.AppendLine("---- END LOG ----");

		await DownloadAs(js, $"{DateTime.Now.ToUniversalTime().ToFileTimeString()}-{currentChannel.ChannelName}.txt",
			Encoding.UTF8.GetBytes(sb.ToString()));
	}
}