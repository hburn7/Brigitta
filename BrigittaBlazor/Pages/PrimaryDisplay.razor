@page "/primarydisplay"

@using BanchoSharp.Interfaces
@using BanchoSharp.Multiplayer
@using BrigittaBlazor.Settings
@using BrigittaBlazor.Utils
@using BrigittaBlazor.Shared.Components
@using BrigittaBlazor.Shared.Components.MultiplayerLobby
@implements IDisposable

@attribute [Authorize]

@inject IBanchoClient Client
@inject ISnackbar Snackbar
@inject ILogger<PrimaryDisplay> Logger
@inject IJSRuntime JS
@inject UserSettings UserSettings
@inject NavigationManager NavigationManager
@inject StateMaintainer StateManager

<MudGrid Spacing="2" Style="margin-top: -50px">
    <MudItem xs="12" sm="_chatWidthSm" lg="_chatWidthLg">
        @*Channels, text box*@
        <MudPaper Class="pa-2">
            <ChatConsoleHeader @bind-CurrentItem="@_currentlySelectedChannel"
                               ChannelNotifications="@StateManager.ChannelNotifications"/>

            <ChatConsole CurrentChannel="@_currentlySelectedChannel"
                         DisplayTimestamps="@_timestampsInChat"
                         DisplayUTC="@_displayUTC"
                         CurrentLobby="@_currentlySelectedLobby"
                         AutoScroll="@_autoScroll"/>

            <TextChatEntryField CurrentChannel="@_currentlySelectedChannel"
                                ConsoleDiv="@_consoleDivId"
                                AutoScroll="@_autoScroll"
                                DisplayUTC="@_displayUTC"/>
        </MudPaper>
        @*Button row*@
        <MudPaper Class="pa-2">
            <ChatIconButtonsPanel CurrentChannel="@_currentlySelectedChannel"
                                  @bind-AutoScroll="@_autoScroll"
                                  @bind-DisplayTimestamps="@_timestampsInChat"
                                  @bind-DisplayUTC="@_displayUTC"/>
        </MudPaper>
    </MudItem>

    @*Multiplayer lobby information*@
    @if (_currentlySelectedLobby != null)
    {
        // We are inside of a multiplayer lobby channel.
        <MudItem xs="12" sm="6" lg="4">
            <MudGrid Spacing="2">
                <MudItem xs="12">
                    <MudPaper Class="pa-2">
                        <LobbyInformationPanel CurrentLobby="@_currentlySelectedLobby"/>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Class="pa-2">
                        <LobbyButtonsPanel CurrentLobby="@_currentlySelectedLobby"/>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Class="pa-2">
                        <LobbyModSelectionPanel CurrentLobby="@_currentlySelectedLobby"/>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12">
            <MudPaper>
                @*Player display*@
                <LobbyPlayerDisplay CurrentlySelectedLobby="@_currentlySelectedLobby"/>
            </MudPaper>
        </MudItem>
    }
</MudGrid>

@code {
        @*Member Variables*@
    private IChatChannel? _currentlySelectedChannel;
    private Dictionary<string, Delegate> _eventListeners = new(); // Key: alert's name, Value: the event handler

    // ReSharper disable once MergeConditionalExpression -- This actually causes an unhandled exception
    private IMultiplayerLobby? _currentlySelectedLobby => _currentlySelectedChannel != null ?
        _currentlySelectedChannel as IMultiplayerLobby :
        null;
    private bool _autoScroll = true;
    private bool _timestampsInChat = true;
    private bool _displayUTC;
    private string _consoleDivId => "console";
    private int _chatWidthSm => _currentlySelectedLobby != null ? 6 : 12;
    private int _chatWidthLg => _currentlySelectedLobby != null ? 8 : 12;

    protected override async Task OnInitializedAsync()
    {
        StateManager.OnAudioAlertCreated += OnAudioAlertCreated;
        StateManager.OnAudioAlertUpdated += OnAudioAlertUpdated;
        StateManager.OnAudioAlertDeleted += OnAudioAlertDeleted;
        
        // Reload all of the audio alerts
        foreach (var alert in StateManager.AudioAlerts)
        {
            SubscribeToAudioEvent(alert);
        }

        InitClientEvents();
        SubscribeToHotkeyPressedEvent();

        if (!StateManager.EventTracker.HasRegisteredPrimaryDisplayDefaultEvents)
        {
            await JoinDefaultChannels();

            StateManager.EventTracker.HasRegisteredPrimaryDisplayDefaultEvents = true;
        }
    }

    private void OnAudioAlertCreated(object? sender, UserAudioAlert e)
    {
        SubscribeToAudioEvent(e);
    }

    private void OnAudioAlertUpdated(object? sender, UserAudioAlert e)
    {
        UnsubscribeFromAudioEvent(e);
        SubscribeToAudioEvent(e);
    }

    private void OnAudioAlertDeleted(object? sender, UserAudioAlert e)
    {
        UnsubscribeFromAudioEvent(e);
    }

    private void SubscribeToAudioEvent(UserAudioAlert alert)
    {
        switch (alert.Trigger)
        {
            case EventTrigger.OnPrivateMessage:
                Action<IPrivateIrcMessage> onMessageHandler = async _ => await HandleAudioEvent(alert);
                Client.OnPrivateMessageReceived += onMessageHandler;
                _eventListeners[alert.Name] = onMessageHandler;
                break;
            case EventTrigger.OnDirectMessage:
                Action<IPrivateIrcMessage> onDirectMessageHandler = async m =>
                {
                    if (m.IsDirect)
                    {
                        await HandleAudioEvent(alert);
                    }
                };
                Client.OnPrivateMessageReceived += onDirectMessageHandler;
                _eventListeners[alert.Name] = onDirectMessageHandler;
                break;
            case EventTrigger.OnUsernameMentioned:
                Action<IPrivateIrcMessage> onUsernameMentionedHandler = async m =>
                {
                    if (m.Content.Contains(Client.ClientConfig.Credentials.Username, StringComparison.OrdinalIgnoreCase))
                    {
                        await HandleAudioEvent(alert);
                    }
                };
                Client.OnPrivateMessageReceived += onUsernameMentionedHandler;
                _eventListeners[alert.Name] = onUsernameMentionedHandler;
                break;
            case EventTrigger.OnKeyword:
                Action<IPrivateIrcMessage> onKeywordHandler = async m =>
                {
                    if (m.Content.Contains(alert.TriggerWord, StringComparison.OrdinalIgnoreCase))
                    {
                        await HandleAudioEvent(alert);
                    }
                };
                Client.OnPrivateMessageReceived += onKeywordHandler;
                _eventListeners[alert.Name] = onKeywordHandler;
                break;
            default:
                throw new NotImplementedException();
        }
    }

    private void UnsubscribeFromAudioEvent(UserAudioAlert alert)
    {
        if (_eventListeners.TryGetValue(alert.Name, out var eventHandler))
        {
            switch (alert.Trigger)
            {
                case EventTrigger.OnPrivateMessage:
                    Client.OnPrivateMessageReceived -= (Action<IPrivateIrcMessage>)eventHandler;
                    break;
                case EventTrigger.OnDirectMessage:
                    Client.OnPrivateMessageReceived -= (Action<IPrivateIrcMessage>)eventHandler;
                    break;
                case EventTrigger.OnUsernameMentioned:
                    Client.OnPrivateMessageReceived -= (Action<IPrivateIrcMessage>)eventHandler;
                    break;
                case EventTrigger.OnKeyword:
                    Client.OnPrivateMessageReceived -= (Action<IPrivateIrcMessage>)eventHandler;
                    break;
            }

            _eventListeners.Remove(alert.Name);
        }
    }

    private async Task HandleAudioEvent(UserAudioAlert alert)
    {
        Logger.LogTrace("Handling audio event for alert {AlertName}", alert.Name);
        await JS.InvokeVoidAsync("playSound", alert.Path);
    }

    // === BEGIN EVENT SUBSCRIPTION MANAGERS ===
    private Action<ParsedJsonEvent>? _onHotkeyPressedDelegateAsync;

    private void SubscribeToHotkeyPressedEvent()
    {
        _onHotkeyPressedDelegateAsync = async k => await DeployMacroForHotkeyAsync(k);
        HotkeyListener.OnHotkeyPressed += _onHotkeyPressedDelegateAsync;
    }

    private void UnsubscribeFromHotkeyPressedEvent() => HotkeyListener.OnHotkeyPressed -= _onHotkeyPressedDelegateAsync;

    // === END EVENT SUBSCRIPTION MANAGERS ===
    private async Task DeployMacroForHotkeyAsync(ParsedJsonEvent k)
    {
        if (!NavigationManager.Uri.ToLower().Contains("primarydisplay"))
        {
            Logger.LogTrace("Halted hotkey deployment due to not being on the primary display page");
            return;
        }

        foreach (var bind in UserSettings.KeyBinds)
        {
            if (bind.Key == k.Key && bind.Alt == k.AltKey && bind.Ctrl == k.CtrlKey && bind.Shift == k.ShiftKey)
            {
                if (_currentlySelectedChannel != null)
                {
                    await Client.SendPrivateMessageAsync(_currentlySelectedChannel.ChannelName, bind.Message);
                    await InvokeAsync(StateHasChanged);
                    Logger.LogTrace($"Hotkey deployed: '{bind}' -> {_currentlySelectedChannel.ChannelName}: {bind.Message}");
                    break;
                }
            }
        }
    }

    public void Dispose()
    {
        Logger.LogDebug("PrimaryDisplay disposed");
    // TODO: Test if this method is called when navigating away
        UnsubscribeFromHotkeyPressedEvent();

    // Unsubscribe from all event listeners
        foreach (var alert in StateManager.AudioAlerts)
        {
            UnsubscribeFromAudioEvent(alert);
        }

        StateManager.OnAudioAlertCreated -= OnAudioAlertCreated;
        StateManager.OnAudioAlertUpdated -= OnAudioAlertUpdated;
        StateManager.OnAudioAlertDeleted -= OnAudioAlertDeleted;
    }

    private void InitClientEvents()
    {
    // NavigationManager.LocationChanged += (_, _) =>
    // {
    //     UnsubscribeFromHotkeyPressedEvent();
    // };

        if (!StateManager.EventTracker.HasRegisteredPrimaryDisplayDefaultEvents)
        {
    // Things that can only be registered once go here
            Client.OnMessageReceived += async m =>
            {
                if (m is IPrivateIrcMessage priv)
                {
                    await ChannelChipNotificationRecolor(priv);
                }
            };

            Client.OnPrivateMessageReceived += async _ => { await InvokeAsync(StateHasChanged); };
        }

        Client.OnChannelParted += c => { Snackbar.Add($"Left channel {c}", Severity.Success); };
        Client.OnPrivateMessageSent += async _ => await InvokeAsync(StateHasChanged);
        Client.OnMessageReceived += async _ => await InvokeAsync(StateHasChanged);
        Client.OnAuthenticatedUserDMReceived += async m =>
        {
            StateManager.ChannelNotifications.TryAdd(m.Sender, ChatNotification.DirectMessage);
            await InvokeAsync(StateHasChanged);
        };

        Client.OnChannelJoined += async channel =>
        {
            StateManager.ChannelNotifications.TryAdd(channel.ChannelName, ChatNotification.None);

            Snackbar.Add($"Joined channel {channel}", Severity.Success);
    // _currentlySelectedChannel = channel;

            await InvokeAsync(StateHasChanged);
        };

        Client.OnUserQueried += async user =>
        {
            StateManager.ChannelNotifications.TryAdd(user, ChatNotification.None);

            Snackbar.Add($"Opened conversation with {user}", Severity.Success);
            await InvokeAsync(StateHasChanged);
        };

        Client.BanchoBotEvents.OnTournamentLobbyCreated += lobby =>
        {
            Snackbar.Add($"Created the tournament match: {lobby.Name}", Severity.Info);

    // Register lobby events
            lobby.OnMatchStarted += () => Snackbar.Add($"Match started: {lobby.Name}", Severity.Info);
            lobby.OnMatchFinished += () => Snackbar.Add($"Match finished: {lobby.Name}", Severity.Info);
            lobby.OnMatchAborted += () => Snackbar.Add($"Match aborted: {lobby.Name}", Severity.Warning);
            lobby.OnClosed += () => Snackbar.Add($"Lobby closed: {lobby.Name}", Severity.Info);
            lobby.OnStateChanged += async () =>
            {
                await InvokeAsync(StateHasChanged);

                if (lobby.LobbyTimerInProgress)
                {
                    await Task.Run(async () =>
                    {
                        while (lobby.LobbyTimerInProgress && !lobby.IsClosed)
                        {
                            await Task.Delay(1000);
                            await InvokeAsync(StateHasChanged);
                        }
                    });
                }
            };
        };
    }

    private async Task ChannelChipNotificationRecolor(IPrivateIrcMessage priv)
    {
        Logger.LogDebug($"Private message received: {priv}");

    // If the message is from the currently selected channel, don't recolor the chip
    // otherwise, check it for a potential recolor
        string target = _currentlySelectedChannel?.ChannelName ?? string.Empty;
        bool needsRecolor = target.StartsWith("#") ?
            priv.Recipient != target :
            priv.Sender != target;

        if (needsRecolor)
        {
    // Message received from outside source (not the currently selected channel)
            string key = priv.IsDirect ? priv.Sender : priv.Recipient;
            if (!StateManager.ChannelNotifications.ContainsKey(key))
            {
                return;
            }

            if (priv.IsDirect)
            {
    // New DM from outside user
                StateManager.ChannelNotifications[key] = ChatNotification.DirectMessage;
            }
            else
            {
    // New message in channel

    // Highlight
                if (priv.Content.Contains(Client.ClientConfig.Credentials.Username, StringComparison.OrdinalIgnoreCase))
                {
                    StateManager.ChannelNotifications[key] = ChatNotification.MentionsUsername;
                    await InvokeAsync(StateHasChanged);
                    return;
                }

                string[] refKeyWords =
                {
                    "ref",
                    "referee"
                };

                if (priv.Recipient.StartsWith("#mp_"))
                {
    // New message in referee lobby
                    if (refKeyWords.Any(k => priv.Content.Contains(k, StringComparison.OrdinalIgnoreCase)))
                    {
                        StateManager.ChannelNotifications[key] = ChatNotification.MentionsRefereeKeywords;
                    }
                    else
                    {
                        StateManager.ChannelNotifications[key] = ChatNotification.GeneralMessage;
                    }
                }
                else
                {
    // New message in general channel
                    StateManager.ChannelNotifications[key] = ChatNotification.GeneralMessage;
                }
            }

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task JoinDefaultChannels()
    {
    // Every channel added here also needs to be added to the notifications dict
        await Client.QueryUserAsync("BanchoBot");

#if DEBUG
        var mp = new MultiplayerLobby(Client, 12345, "OWC: (United States) Vs. (Germany)");
        mp.Players.Add(new MultiplayerPlayer(mp, "mrekk", 1, TeamColor.Red, Mods.NoFail | Mods.Hidden | Mods.HardRock)
        {
            State = PlayerState.NoMap
        });
        mp.Players.Add(new MultiplayerPlayer(mp, "lifeline", 2, TeamColor.Red)
        {
            State = PlayerState.Ready
        });
        mp.Players.Add(new MultiplayerPlayer(mp, "Rimuru", 3, TeamColor.Red, Mods.Easy | Mods.Flashlight |
                                                                             Mods.Hidden | Mods.NoFail));
        mp.Players.Add(new MultiplayerPlayer(mp, "aetrna", 4, TeamColor.Red));
        mp.Players.Add(new MultiplayerPlayer(mp, "BlackDog5", 5, TeamColor.Red));
        mp.Players.Add(new MultiplayerPlayer(mp, "shimon", 6, TeamColor.Red));
        mp.Players.Add(new MultiplayerPlayer(mp, "Utami", 7, TeamColor.Red, Mods.HardRock));
        mp.Players.Add(new MultiplayerPlayer(mp, "Mathi", 8, TeamColor.Red, Mods.Relax));
        mp.Players.Add(new MultiplayerPlayer(mp, "femboy tummy", 9, TeamColor.Blue, Mods.Perfect | Mods.Hidden));
        mp.Players.Add(new MultiplayerPlayer(mp, "Arnold24x24", 10, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "Chicony", 11, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "NyanPotato", 12, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "WindowLife", 13, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "Bocchi the Rock", 14, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "Rafis", 15, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "maliszewski", 16, TeamColor.Blue));
        Client.Channels.Add(mp);
        StateManager.ChannelNotifications.TryAdd("#mp_12345", ChatNotification.None);
#endif
    }

    public record ModDisplay(Color Color, string Abbreviation, string Tooltip);

}
    

