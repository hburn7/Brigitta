@page "/primarydisplay"
@using BanchoSharp.Interfaces
@using Brigitta.Extensions
@using System.Collections.ObjectModel

@attribute [Authorize]

@inject IBanchoClient _client
@inject ILogger<PrimaryDisplay> _logger

<MudStack>
    <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">This view is incomplete. Expect bugs.</MudAlert>
    <MudGrid Spacing="20">
        <MudPaper Width="60%">
            <MudContainer Style="overflow-y: scroll; height: 400px;">
                @if (_currentlySelectedChannel != null)
                {
                    foreach (var message in ((IChatChannel)_currentlySelectedChannel).MessageHistory)
                    {
                        <MudText>@(((IPrivateIrcMessage)message).ToDisplayString())</MudText>
                    }
                }
            </MudContainer>
        
            <MudTextField @bind-value="TextChatValue" Label="Send a message" Immediate="true"
                          Variant="Variant.Outlined" T="string"
                          Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Send" AdornmentColor="Color.Success"
                          @onkeydown="@OnTextChatSend"/>
        </MudPaper>
        <MudPaper Width="40%">
            <MudList Clickable="true" @bind-SelectedValue="_currentlySelectedChannel" >
                @foreach (var channel in _client.Channels)
                {
                    <MudListItem Value="@channel" Icon="@Icons.Material.Outlined.Chat">@channel.ChannelName</MudListItem>
                }
            </MudList>
        </MudPaper>
    </MudGrid>
</MudStack>


@code {
    public string TextChatValue { get; set; }

    private object _currentlySelectedChannel;
    private bool _autoScroll;

    protected override void OnInitialized()
    {
        _client.OnMessageReceived += async m =>
        {
            if (m is IPrivateIrcMessage priv)
            {
                _logger.LogDebug($"Private message received: {priv}");
            }
            await InvokeAsync(StateHasChanged);
        };
        _client.OnChannelJoined += async channel =>
        {
            await InvokeAsync(StateHasChanged);
        };
        _client.OnChannelParted += async channel =>
        {
            await InvokeAsync(StateHasChanged);
        };
        
        _client.JoinChannelAsync("#osu");
        _client.QueryUserAsync("BanchoBot");
        _currentlySelectedChannel = _client.GetChannel("BanchoBot") ?? _client.Channels.FirstOrDefault();
    }
    
    private async Task OnTextChatSend(KeyboardEventArgs args)
    {
        if (args.Key != "Enter")
        {
            return;
        }

        await _client.SendPrivateMessageAsync(((IChatChannel)_currentlySelectedChannel).ChannelName, TextChatValue);
        _logger.LogDebug($"Message sent: '{TextChatValue}' to {_currentlySelectedChannel}");

        TextChatValue = string.Empty;
        await InvokeAsync(StateHasChanged);
    }
}