@page "/primarydisplay"
@using BrigittaBlazor.Extensions
@using BanchoSharp.Interfaces
@using BanchoSharp.Messaging.ChatMessages
@using BanchoSharp.Multiplayer
@using Humanizer
@using Humanizer.Localisation
@using System.Text
@using BrigittaBlazor.Utils
@using BrigittaBlazor.Shared.PrimaryDisplayComponents

@attribute [Authorize]

@inject IBanchoClient Client
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inject ILogger<PrimaryDisplay> Logger
@inject IScrollUtils ScrollUtils


<MudGrid Spacing="2" Style="margin-top: -50px">
<MudItem xs="12" sm="_chatWidthSm" lg="_chatWidthLg">
    @*Channels, text box*@
    <MudPaper Class="pa-2">
        <MudGrid Spacing="1">
            <MudItem xs="11">
                <ChannelChipList @bind-CurrentlySelectedItem="_currentlySelectedItem"/>
            </MudItem>
            <MudItem xs="1">
                <HelpWikiButton/>
            </MudItem>
            <MudItem xs="12">
                <MudDivider/>
            </MudItem>
        </MudGrid>

        <ChatConsole CurrentChannel="_currentlySelectedChannel"
                     DisplayTimestamps="_timestampsInChat"
                     DisplayUTC="_utcTime"/>

        <TextChatEntryField CurrentChannel="@_currentlySelectedChannel"
                            ConsoleDiv="@_consoleDivId"
                            AutoScroll="@_autoScroll"/>
    </MudPaper>
    @*Button row*@
    <MudPaper Class="pa-2">
        <MudGrid Spacing="1">
            <MudItem>
                <MudTooltip Text="Add channel">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Medium" Color="Color.Success"
                                   OnClick="@OpenAddChannelDialog"/>
                </MudTooltip>
            </MudItem>
            <MudItem>
                <MudTooltip Text="@_autoScrollToolTip">
                    <MudToggleIconButton @bind-Toggled="_autoScroll" Icon="@Icons.Material.Filled.ArrowDownward"
                                         Size="Size.Medium" ToggledSize="Size.Medium"
                                         ToggledColor="Color.Success" ToggledIcon="@Icons.Material.Filled.ArrowCircleDown"/>
                </MudTooltip>
            </MudItem>
            <MudItem>
                <MudTooltip Text="Display timestamps in chat">
                    <MudToggleIconButton @bind-Toggled="@_timestampsInChat" ToggledIcon="@Icons.Material.Filled.Watch"
                                         ToggledColor="Color.Success" Color="Color.Inherit" Size="Size.Medium" ToggledSize="Size.Medium"
                                         Icon="@Icons.Material.Filled.WatchOff"/>
                </MudTooltip>
            </MudItem>
            <MudItem>
                <MudTooltip Text="Display times in UTC+0">
                    <MudToggleIconButton ToggledIcon="@Icons.Material.Filled.EventAvailable"
                                         Icon="@Icons.Material.Filled.EventBusy" @bind-Toggled="@_utcTime"
                                         ToggledColor="Color.Success" Color="Color.Inherit"
                                         Size="Size.Medium" ToggledSize="Size.Medium"/>
                </MudTooltip>
            </MudItem>
            <MudItem>
                <MudTooltip
                    Text=@($"Download chat log for {(object?)_currentlySelectedChannel ?? "(no channel selected)"}")>

                    <MudIconButton Icon="@Icons.Material.Filled.FileDownload" Size="Size.Medium" Color="Color.Inherit"
                                   OnClick="@(DownloadChatHistoryAsync)"/>
                </MudTooltip>
            </MudItem>
            @if (DebugUtils.IsDebugBuild())
            {
                <MudItem>
                    <MudGrid>
                        <MudItem>
                            <MudTextField @bind-Value="_dbg_SimulateMsgCount" T="int" Label="Simulate Messages"/>
                        </MudItem>
                        <MudItem>
                            <MudIconButton Icon="@Icons.Material.Filled.Send" OnClick="@Dbg_SimulateMessages"/>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            }
        </MudGrid>
    </MudPaper>
</MudItem>

@*Multiplayer lobby information*@
@if (_currentlySelectedLobby != null)
{
    // We are inside of a multiplayer lobby channel.
    <MudItem xs="12" sm="6" lg="4">
        <MudGrid Spacing="2">
            <MudItem xs="12">
                <MudPaper Class="pa-2">
                    <MudGrid Spacing="2">
                        <MudItem>
                            <MudIcon Icon="@Icons.Material.Filled.DriveFileRenameOutline"/>
                            <MudLink Href="@_currentlySelectedLobby.HistoryUrl" Underline="Underline.Hover" Color="Color.Primary" Target="_blank">
                                <MudText Inline="true">
                                    <b>@_currentlySelectedLobby.Name</b>
                                </MudText>
                            </MudLink>
                        </MudItem>
                        <MudItem>
                            <MudGrid Spacing="1">
                                <MudItem>
                                    <MudIcon Icon="@Icons.Material.Filled.Numbers"/>
                                    <MudText Inline="true">
                                        <b>Size:</b> @_currentlySelectedLobby.Size
                                    </MudText>
                                </MudItem>
                                <MudItem>
                                    <MudIcon Icon="@Icons.Material.Filled.PeopleAlt"/>
                                    <MudText Inline="true">
                                        <b>Players:</b> @_currentlySelectedLobby.PlayerCount
                                    </MudText>
                                </MudItem>
                                <MudItem>
                                    <MudIcon Icon="@Icons.Material.Filled.HourglassBottom"/>
                                    <MudText Inline="true">@(_currentlySelectedLobby.LobbyTimerInProgress ? _currentlySelectedLobby.LobbyTimerRemaining.ToFormattedDuration() : "No timer active")</MudText>
                                </MudItem>
                                <MudItem>
                                    @*Format*@
                                    <MudIcon Icon="@Icons.Material.Filled.AssignmentTurnedIn"/>
                                    <MudText Inline="true">
                                        <b>Format:</b> @_currentlySelectedLobby.Format
                                    </MudText>
                                </MudItem>
                                <MudItem>
                                    @*Win condition*@
                                    <MudIcon Icon="@Icons.Material.Filled.Flag"/>
                                    <MudText Inline="true">
                                        <b>WC:</b> @_currentlySelectedLobby.WinCondition
                                    </MudText>
                                </MudItem>
                                <MudItem>
                                    @*Gamemode*@
                                    <MudIcon Icon="@Icons.Material.Filled.VideogameAsset"/>
                                    <MudText Inline="true">
                                        <b>Mode:</b> @_currentlySelectedLobby.GameMode
                                    </MudText>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
            <MudItem xs="12">
                <MudPaper Class="pa-2">
                    <MudGrid Spacing="2">
                        <MudItem>
                            <MudNumericField @bind-Value="@_mpTimerValue" Label="Timer Seconds" Variant="Variant.Outlined" Min="0" Max="600" Step="30"/>
                        </MudItem>
                        <MudItem>
                            <MudNumericField @bind-Value="@_mpMatchTimerValue" Label="Match Start Timer Seconds" Variant="Variant.Outlined" Min="5" Max="60" Step="5"/>
                        </MudItem>
                    </MudGrid>

                    <MudGrid Spacing="2">
                        <MudItem>
                            <MudTooltip Text="Start a timer">
                                <MudIconButton Color="Color.Inherit" OnClick="@(() => _currentlySelectedLobby.SetTimerAsync(_mpTimerValue))"
                                               Icon="@Icons.Material.Filled.HourglassBottom" Size="Size.Medium"/>
                            </MudTooltip>
                        </MudItem>
                        <MudItem>
                            <MudTooltip Text="Start a match timer">
                                <MudIconButton Color="Color.Error" OnClick="@(() => _currentlySelectedLobby.SetMatchStartTimerAsync(_mpMatchTimerValue))"
                                               Icon="@Icons.Material.Filled.HourglassBottom" Size="Size.Medium"/>
                            </MudTooltip>
                        </MudItem>

                        <MudItem>
                            @*Refresh !mp settings*@
                            <MudTooltip Text="!mp settings">
                                <MudIconButton Icon="@Icons.Material.Filled.SettingsBackupRestore"
                                               OnClick="@(async () => await _currentlySelectedLobby.RefreshSettingsAsync())" Size="Size.Medium"/>
                            </MudTooltip>
                        </MudItem>

                        <MudItem>
                            <MudTooltip Text="Locks / unlocks the lobby. If the lobby is locked, players cannot change slots at will.">
                                @*Abort timer*@
                                @if (_currentlySelectedLobby.IsLocked)
                                {
                                    <MudIconButton Color="Color.Inherit" Icon="@Icons.Material.Filled.LockOpen"
                                                   OnClick="@(async () => await _currentlySelectedLobby.UnlockAsync())" Size="Size.Medium"/>
                                }
                                else
                                {
                                    <MudIconButton Color="Color.Warning" Icon="@Icons.Material.Filled.LockPerson"
                                                   OnClick="@(async () => await _currentlySelectedLobby.LockAsync())" Size="Size.Medium"/>
                                }
                            </MudTooltip>
                        </MudItem>

                        <MudItem>
                            <MudTooltip Text="Abort the current timer, if there is one">
                                @*Abort timer*@
                                <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.HourglassDisabled"
                                               OnClick="@(async () => await _currentlySelectedLobby.AbortTimerAsync())" Size="Size.Medium"/>
                            </MudTooltip>
                        </MudItem>

                        <MudItem>
                            <MudTooltip Text="Abort the match">
                                @*Abort lobby*@
                                <MudIconButton Color="Color.Error"
                                               OnClick="@(async () => await _currentlySelectedLobby.AbortAsync())" Icon="@Icons.Material.Filled.Dangerous" Size="Size.Medium"/>
                            </MudTooltip>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
            <MudItem xs="12">
                <MudPaper Class="pa-2">
                    <MudGrid Spacing="1" Justify="Justify.SpaceAround">
                        <MudItem xs="12">
                            <MudText Align="Align.Center" Typo="Typo.body1">Mod Selection</MudText>
                        </MudItem>
                        <MudItem xs="12">
                            <MudChipSet @bind-SelectedChips="_selectedMods" MultiSelection="true">
                                <MudGrid Spacing="1" Justify="Justify.Center">
                                    @foreach (var mod in ModDisplays)
                                    {
                                        <MudTooltip Text="@mod.Tooltip">
                                            <MudItem>
                                                <MudChip Color="@mod.Color" Variant="Variant.Text" Value="@mod">
                                                    @mod.Abbreviation
                                                </MudChip>
                                            </MudItem>
                                        </MudTooltip>

                                        if (mod.Abbreviation is "FM")
                                        {
                                            <MudItem>
                                                <MudDivider Vertical="true"/>
                                            </MudItem>
                                        }

                                        if (mod.Abbreviation is "HT" or "FL")
                                        {
                                            <MudItem xs="12">
                                                <MudDivider/>
                                            </MudItem>
                                        }
                                    }
                                </MudGrid>
                            </MudChipSet>
                        </MudItem>
                        <MudDivider/>
                        <MudItem xs="12">
                            <MudGrid Spacing="1" Justify="Justify.SpaceAround">
                                <MudItem>
                                    <MudButton Disabled="@(!_selectedMods?.Any() ?? false)" Color="Color.Primary"
                                               StartIcon="@Icons.Material.Filled.Check" OnClick="@DeployModSelectionsAsync">
                                        Deploy Mods
                                    </MudButton>
                                </MudItem>
                                <MudItem>
                                    <MudButton Disabled="@(!_selectedMods?.Any() ?? false)" Color="Color.Error"
                                               StartIcon="@Icons.Material.Filled.ClearAll" OnClick="@ClearMods">
                                        Clear
                                    </MudButton>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudItem xs="12">
        <MudPaper>
            @*Player display*@
            <MultiplayerLobbyPlayerDisplay CurrentlySelectedLobby="@_currentlySelectedLobby" />
        </MudPaper>
    </MudItem>
}
</MudGrid>

@* Add channel dialog *@
<MudDialog @bind-IsVisible="_addChannelDialogIsVisible" Options="_dialogOptions">
    <DialogContent>
        <p>Add a channel</p>
        <MudTextField Label="Channel" T="string" @bind-Value="_addChannelDialogValue"
                      Validation="@(new Func<string, IEnumerable<string>>(AddChannelValidation))"/>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="CloseAddChannelDialog">Cancel</MudButton>
        <MudButton Color="Color.Success" OnClick="AddChannelAsync">Add</MudButton>
    </DialogActions>
</MudDialog>


@code {
    // Dialogs
    private readonly DialogOptions _dialogOptions = new()
    {
        CloseOnEscapeKey = true
    };
    private bool _addChannelDialogIsVisible;

    private void OpenAddChannelDialog()
    {
        _addChannelDialogIsVisible = true;
        _addChannelDialogValue = "";
    }

    private static readonly IEnumerable<ModDisplay> ModDisplays = new List<ModDisplay>
    {
        new(Color.Info, "NM", "No Mod", 0),
        new(Color.Info, "FM", "Freemod", 0),
        new(Color.Success, "NF", "No Fail", 0),
        new(Color.Success, "EZ", "Easy", -0.5),
        new(Color.Success, "HT", "Half Time", -0.7),
        new(Color.Error, "HR", "Hard Rock", 0.1),
        new(Color.Surface, "SD", "Sudden Death", 0.1),
        new(Color.Primary, "DT", "Double Time", 0.20),
        new(Color.Warning, "HD", "Hidden", 0.06),
        new(Color.Surface, "FL", "Flashlight", 0.12),
        new(Color.Info, "RX", "Relax", -double.MaxValue),
        new(Color.Info, "AP", "Auto Pilot", -double.MaxValue),
        new(Color.Info, "SO", "Spun Out", -0.1)
    };
    private static readonly Dictionary<string, ChatNotification> ChannelNotifications = new();
        @*Member Variables*@
    private void CloseAddChannelDialog() => _addChannelDialogIsVisible = false;
    private MudListItem? _currentlySelectedItem;
    private IChatChannel? _currentlySelectedChannel => _currentlySelectedItem?.Value as IChatChannel;
    // ReSharper disable once MergeConditionalExpression -- This actually causes an unhandled exception
    private IMultiplayerLobby? _currentlySelectedLobby => _currentlySelectedChannel != null ?
        _currentlySelectedChannel as IMultiplayerLobby :
        null;
    private MudChip[]? _selectedMods;
    private bool _utcTime;
    private bool _autoScroll = true;
    private bool _timestampsInChat = true;
    private string _addChannelDialogValue;
    private string _consoleDivId => "console";
    private string _autoScrollToolTip => _autoScroll ? "AutoScroll (currently enabled)" : "AutoScroll (currently disabled)";
    private int _mpTimerValue = 120;
    private int _mpMatchTimerValue = 5;
    private int _chatWidthSm => _currentlySelectedLobby != null ? 6 : 12;
    private int _chatWidthLg => _currentlySelectedLobby != null ? 8 : 12;
    private int _dbg_SimulateMsgCount = 10;

    private void Dbg_SimulateMessages()
    {
        Random rand = new();

        string recipient = "#debug-testing";
        string[] senders =
        {
            "Foo",
            "SomeGuy18",
            "Bar",
            "Baz",
            "Qux",
            "Quux",
            "Corge",
            "Grault",
            "Garply",
            "Waldo",
            "Fred",
            "Plugh",
            "Xyzzy",
            "Thud"
        };
        string[] sampleMessages =
        {
            "Hello world!",
            "This is a test message",
            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
            "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
            "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.",
            "Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
        };
        for (int i = 0; i < _dbg_SimulateMsgCount; i++)
        {
            string sender = senders[rand.Next(senders.Length)];
            string message = sampleMessages[rand.Next(sampleMessages.Length)];
            Client.SimulateMessageReceived(PrivateIrcMessage.CreateFromParameters(sender, recipient, message));
        }
    }

    protected override void OnInitialized()
    {
        Client.OnMessageReceived += async m =>
        {
            if (m is IPrivateIrcMessage priv)
            {
                Logger.LogDebug($"Private message received: {priv}");

                if (_currentlySelectedChannel == null)
                {
                    return;
                }

                if ((!priv.IsDirect || !priv.Sender.Equals(_currentlySelectedChannel.ChannelName)) &&
                    (priv.IsDirect || !priv.Recipient.Equals(_currentlySelectedChannel.ChannelName)))
                {
    // Message received from outside source (not the currently selected channel)
                    string key = priv.IsDirect ? priv.Sender : priv.Recipient;
                    if (!ChannelNotifications.ContainsKey(key))
                    {
                        return;
                    }

                    if (priv.IsDirect)
                    {
    // New DM from outside user
                        ChannelNotifications[key] = ChatNotification.DirectMessage;
                    }
                    else
                    {
    // New message in channel

    // Highlight
                        if (priv.Content.Contains(Client.ClientConfig.Credentials.Username, StringComparison.OrdinalIgnoreCase))
                        {
                            ChannelNotifications[key] = ChatNotification.MentionsUsername;
                            await InvokeAsync(StateHasChanged);
                            return;
                        }

                        string[] refKeyWords =
                        {
                            "ref",
                            "referee"
                        };
                        if (priv.Recipient.StartsWith("#mp_"))
                        {
    // New message in referee lobby
                            if (refKeyWords.Any(k => priv.Content.Contains(k, StringComparison.OrdinalIgnoreCase)))
                            {
                                ChannelNotifications[key] = ChatNotification.MentionsRefereeKeywords;
                            }
                            else
                            {
                                ChannelNotifications[key] = ChatNotification.GeneralMessage;
                            }
                        }
                        else
                        {
    // New message in general channel
                            ChannelNotifications[key] = ChatNotification.GeneralMessage;
                        }
                    }

                    await InvokeAsync(StateHasChanged);
                }
            }
        };
        Client.OnPrivateMessageSent += async _ => await ScrollUtils.ScrollToBottomAsync();

        Client.OnPrivateMessageReceived += async msg =>
        {
            string channel = msg.IsDirect ? msg.Sender : msg.Recipient;
            if (_currentlySelectedChannel?.ChannelName?.Equals(channel, StringComparison.OrdinalIgnoreCase) ?? false)
            {
                await ScrollUtils.ScrollToBottomAsync();
            }
            await InvokeAsync(StateHasChanged);
        };
        Client.OnChannelParted += c => { Snackbar.Add($"Left channel {c}", Severity.Success); };

        Client.OnAuthenticatedUserDMReceived += async m =>
        {
            ChannelNotifications.TryAdd(m.Sender, ChatNotification.DirectMessage);
            await InvokeAsync(StateHasChanged);
        };

        Client.OnChannelJoined += async channel =>
        {
            ChannelNotifications.TryAdd(channel.ChannelName, ChatNotification.None);

            Snackbar.Add($"Joined channel {channel}", Severity.Success);
    // _currentlySelectedChannel = channel;

            await InvokeAsync(StateHasChanged);
        };

        Client.OnUserQueried += async user =>
        {
            ChannelNotifications.TryAdd(user, ChatNotification.None);

            Snackbar.Add($"Opened conversation with {user}", Severity.Success);
            await InvokeAsync(StateHasChanged);
        };

        Client.BanchoBotEvents.OnTournamentLobbyCreated += lobby =>
        {
            Snackbar.Add($"Created the tournament match: {lobby.Name}", Severity.Info);

    // Register lobby events
            lobby.OnMatchStarted += () => Snackbar.Add($"Match started: {lobby.Name}", Severity.Info);
            lobby.OnMatchFinished += () => Snackbar.Add($"Match finished: {lobby.Name}", Severity.Info);
            lobby.OnMatchAborted += () => Snackbar.Add($"Match aborted: {lobby.Name}", Severity.Warning);
            lobby.OnClosed += () => Snackbar.Add($"Lobby closed: {lobby.Name}", Severity.Info);
            lobby.OnStateChanged += async () =>
            {
                await InvokeAsync(StateHasChanged);

                if (lobby.LobbyTimerInProgress)
                {
                    await Task.Run(async () =>
                    {
                        while (lobby.LobbyTimerInProgress && !lobby.IsClosed)
                        {
                            await Task.Delay(1000);
                            await InvokeAsync(StateHasChanged);
                        }
                    });
                }
            };
        };

        Task.Run(async () => await JoinDefaultChannels());
    }

    private async Task JoinDefaultChannels()
    {
    // Every channel added here also needs to be added to the notifications dict
        await Client.QueryUserAsync("BanchoBot");

#if DEBUG
        var mp = new MultiplayerLobby(Client, 12345, "OWC: (United States) Vs. (Germany)");
        mp.Players.Add(new MultiplayerPlayer(mp, "mrekk", 1, TeamColor.Red, Mods.NoFail | Mods.Hidden | Mods.HardRock)
        {
            State = PlayerState.NoMap
        });
        mp.Players.Add(new MultiplayerPlayer(mp, "lifeline", 2, TeamColor.Red)
        {
            State = PlayerState.Ready
        });
        mp.Players.Add(new MultiplayerPlayer(mp, "Rimuru", 3, TeamColor.Red, Mods.Easy | Mods.Flashlight |
                                                                             Mods.Hidden | Mods.NoFail));
        mp.Players.Add(new MultiplayerPlayer(mp, "aetrna", 4, TeamColor.Red));
        mp.Players.Add(new MultiplayerPlayer(mp, "BlackDog5", 5, TeamColor.Red));
        mp.Players.Add(new MultiplayerPlayer(mp, "shimon", 6, TeamColor.Red));
        mp.Players.Add(new MultiplayerPlayer(mp, "Utami", 7, TeamColor.Red, Mods.HardRock));
        mp.Players.Add(new MultiplayerPlayer(mp, "Mathi", 8, TeamColor.Red, Mods.Relax));
        mp.Players.Add(new MultiplayerPlayer(mp, "femboy tummy", 9, TeamColor.Blue, Mods.Perfect | Mods.Hidden));
        mp.Players.Add(new MultiplayerPlayer(mp, "Arnold24x24", 10, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "Chicony", 11, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "NyanPotato", 12, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "WindowLife", 13, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "Bocchi the Rock", 14, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "Rafis", 15, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "maliszewski", 16, TeamColor.Blue));
        Client.Channels.Add(mp);
        ChannelNotifications.TryAdd("#mp_12345", ChatNotification.None);
#endif
    }

    private async Task DownloadChatHistoryAsync()
    {
        if (_currentlySelectedChannel == null)
        {
            return;
        }

        if (!_currentlySelectedChannel.MessageHistory!.Any())
        {
            Snackbar.Add("Download cancelled: no messages to download", Severity.Warning);
            return;
        }

        var timeDelta = _currentlySelectedChannel.MessageHistory!.Last!.Value.Timestamp -
                        _currentlySelectedChannel.MessageHistory.First!.Value.Timestamp;
        var sb = new StringBuilder($"---- Chat log of {_currentlySelectedChannel.ChannelName} generated by Brigitta ----\n");
        var ts = _utcTime ?
            _currentlySelectedChannel.MessageHistory!.First!.Value.Timestamp.ToUniversalTime() :
            _currentlySelectedChannel.MessageHistory!.First!.Value.Timestamp;
        sb.AppendLine($"---- Log spans {timeDelta.Humanize(3, minUnit: TimeUnit.Second)}, " +
                      $"beginning at {ts:R}{ts:zz} ----");
        sb.AppendLine("---- BEGIN LOG ----");
        foreach (var ircMessage in _currentlySelectedChannel.MessageHistory!)
        {
            if (ircMessage is not IPrivateIrcMessage message)
            {
                continue;
            }

            if (_utcTime)
            {
                sb.AppendLine(message.ToUTCDisplayString());
            }
            else
            {
                sb.AppendLine(message.ToDisplayString());
            }
        }
        sb.AppendLine("---- END LOG ----");

        await FileUtils.DownloadAs(JS, $"{DateTime.Now.ToUniversalTime().ToFileTimeString()}-" +
                                       $"{_currentlySelectedChannel.ChannelName}.txt",
            Encoding.UTF8.GetBytes(sb.ToString()));
    }

    private async Task DeployModSelectionsAsync()
    {
        var sb = new StringBuilder("!mp mods ");

        if (_selectedMods == null)
        {
            return;
        }

        foreach (var mod in _selectedMods)
        {
            var display = mod.Value as ModDisplay;
            if (display == null)
            {
                continue;
            }

            string append = display.Abbreviation;

            if (display.Abbreviation == "FM")
            {
                append = "Freemod";
            }
            else if (display.Abbreviation == "NM")
            {
                sb = new StringBuilder("!mp mods");
                break;
            }

            sb.Append(append + " ");
        }
        if (_currentlySelectedLobby == null)
        {
            Snackbar.Add("Failed to deploy mods, no lobby selected", Severity.Error);
            await ClearMods();
            return;
        }

        await ClearMods();
        string send = sb.ToString().Trim();
        await Client.SendPrivateMessageAsync(_currentlySelectedLobby.ChannelName, send);
    }

    private async Task ClearMods()
    {
        _selectedMods = Array.Empty<MudChip>();
        await InvokeAsync(StateHasChanged);
    }

    private IEnumerable<string> AddChannelValidation(string channel)
    {
        if (string.IsNullOrWhiteSpace(channel))
        {
            yield return "Channel name must not be empty.";
        }
    }

    private async Task AddChannelAsync()
    {
        await Client.JoinChannelAsync(_addChannelDialogValue);
        CloseAddChannelDialog();
    }

    public record ModDisplay(Color Color, string Abbreviation, string Tooltip, double ScoreMultiplierOffset);
}