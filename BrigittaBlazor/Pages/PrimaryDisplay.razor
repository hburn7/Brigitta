@page "/primarydisplay"
@using BanchoSharp.Interfaces
@using BanchoSharp.Multiplayer
@using BrigittaBlazor.Utils
@using BrigittaBlazor.Shared.Components
@using BrigittaBlazor.Shared.Components.MultiplayerLobby

@attribute [Authorize]

@inject IBanchoClient Client
@inject ISnackbar Snackbar
@inject ILogger<PrimaryDisplay> Logger


<MudGrid Spacing="2" Style="margin-top: -50px">
    <MudItem xs="12" sm="_chatWidthSm" lg="_chatWidthLg">
        @*Channels, text box*@
        <MudPaper Class="pa-2">
            <ChatConsoleHeader @bind-CurrentItem="@_currentlySelectedItem"
                               ChannelNotifications="@ChannelNotifications"/>

            <ChatConsole CurrentChannel="@_currentlySelectedChannel"
                         DisplayTimestamps="@_timestampsInChat"
                         DisplayUTC="@_displayUTC"
                         CurrentLobby="@_currentlySelectedLobby"
                         AutoScroll="@_autoScroll"/>

            <TextChatEntryField CurrentChannel="@_currentlySelectedChannel"
                                ConsoleDiv="@_consoleDivId"
                                AutoScroll="@_autoScroll"/>
        </MudPaper>
        @*Button row*@
        <MudPaper Class="pa-2">
            <ChatIconButtonsPanel CurrentChannel="@_currentlySelectedChannel"
                                  @bind-AutoScroll="@_autoScroll"
                                  @bind-DisplayTimestamps="@_timestampsInChat"
                                  @bind-DisplayUTC="@_displayUTC"/>
        </MudPaper>
    </MudItem>

    @*Multiplayer lobby information*@
    @if (_currentlySelectedLobby != null)
    {
        // We are inside of a multiplayer lobby channel.
        <MudItem xs="12" sm="6" lg="4">
            <MudGrid Spacing="2">
                <MudItem xs="12">
                    <MudPaper Class="pa-2">
                        <LobbyInformationPanel CurrentLobby="@_currentlySelectedLobby"/>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Class="pa-2">
                        <LobbyButtonsPanel CurrentLobby="@_currentlySelectedLobby"/>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Class="pa-2">
                        <LobbyModSelectionPanel CurrentLobby="@_currentlySelectedLobby"/>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12">
            <MudPaper>
                @*Player display*@
                <LobbyPlayerDisplay CurrentlySelectedLobby="@_currentlySelectedLobby"/>
            </MudPaper>
        </MudItem>
    }
</MudGrid>

@code {
    private static readonly Dictionary<string, ChatNotification> ChannelNotifications = new();
        @*Member Variables*@
    private MudListItem? _currentlySelectedItem;
    private IChatChannel? _currentlySelectedChannel => _currentlySelectedItem?.Value as IChatChannel;
    // ReSharper disable once MergeConditionalExpression -- This actually causes an unhandled exception
    private IMultiplayerLobby? _currentlySelectedLobby => _currentlySelectedChannel != null ?
        _currentlySelectedChannel as IMultiplayerLobby :
        null;
    private bool _autoScroll = true;
    private bool _timestampsInChat = true;
    private bool _displayUTC;
    private string _consoleDivId => "console";
    private int _chatWidthSm => _currentlySelectedLobby != null ? 6 : 12;
    private int _chatWidthLg => _currentlySelectedLobby != null ? 8 : 12;

    protected override void OnInitialized()
    {
        InitClientEvents();
        Task.Run(async () => await JoinDefaultChannels());
    }

    private void InitClientEvents()
    {
        Client.OnMessageReceived += async m =>
        {
            if (m is IPrivateIrcMessage priv)
            {
                await ChannelChipNotificationRecolor(priv);
            }
        };

    // Client.OnPrivateMessageSent += async _ => await ScrollUtils.ScrollToBottomAsync();

        Client.OnPrivateMessageReceived += async msg =>
        {
            string channel = msg.IsDirect ? msg.Sender : msg.Recipient;
            if (_currentlySelectedChannel?.ChannelName?.Equals(channel, StringComparison.OrdinalIgnoreCase) ?? false)
            {
    // await ScrollUtils.ScrollToBottomAsync();
            }

            await InvokeAsync(StateHasChanged);
        };

        Client.OnChannelParted += c => { Snackbar.Add($"Left channel {c}", Severity.Success); };
        Client.OnPrivateMessageSent += async _ => await InvokeAsync(StateHasChanged);
        Client.OnAuthenticatedUserDMReceived += async m =>
        {
            ChannelNotifications.TryAdd(m.Sender, ChatNotification.DirectMessage);
            await InvokeAsync(StateHasChanged);
        };

        Client.OnChannelJoined += async channel =>
        {
            ChannelNotifications.TryAdd(channel.ChannelName, ChatNotification.None);

            Snackbar.Add($"Joined channel {channel}", Severity.Success);
    // _currentlySelectedChannel = channel;

            await InvokeAsync(StateHasChanged);
        };

        Client.OnUserQueried += async user =>
        {
            ChannelNotifications.TryAdd(user, ChatNotification.None);

            Snackbar.Add($"Opened conversation with {user}", Severity.Success);
            await InvokeAsync(StateHasChanged);
        };

        Client.BanchoBotEvents.OnTournamentLobbyCreated += lobby =>
        {
            Snackbar.Add($"Created the tournament match: {lobby.Name}", Severity.Info);

    // Register lobby events
            lobby.OnMatchStarted += () => Snackbar.Add($"Match started: {lobby.Name}", Severity.Info);
            lobby.OnMatchFinished += () => Snackbar.Add($"Match finished: {lobby.Name}", Severity.Info);
            lobby.OnMatchAborted += () => Snackbar.Add($"Match aborted: {lobby.Name}", Severity.Warning);
            lobby.OnClosed += () => Snackbar.Add($"Lobby closed: {lobby.Name}", Severity.Info);
            lobby.OnStateChanged += async () =>
            {
                await InvokeAsync(StateHasChanged);

                if (lobby.LobbyTimerInProgress)
                {
                    await Task.Run(async () =>
                    {
                        while (lobby.LobbyTimerInProgress && !lobby.IsClosed)
                        {
                            await Task.Delay(1000);
                            await InvokeAsync(StateHasChanged);
                        }
                    });
                }
            };
        };
    }

    private async Task ChannelChipNotificationRecolor(IPrivateIrcMessage priv)
    {
        Logger.LogDebug($"Private message received: {priv}");

    // If the message is from the currently selected channel, don't recolor the chip
    // otherwise, check it for a potential recolor
        string target = _currentlySelectedChannel?.ChannelName ?? string.Empty;
        bool needsRecolor = target.StartsWith("#") ?
            priv.Recipient != target :
            priv.Sender != target;

        if (needsRecolor)
        {
    // Message received from outside source (not the currently selected channel)
            string key = priv.IsDirect ? priv.Sender : priv.Recipient;
            if (!ChannelNotifications.ContainsKey(key))
            {
                return;
            }

            if (priv.IsDirect)
            {
    // New DM from outside user
                ChannelNotifications[key] = ChatNotification.DirectMessage;
            }
            else
            {
    // New message in channel

    // Highlight
                if (priv.Content.Contains(Client.ClientConfig.Credentials.Username, StringComparison.OrdinalIgnoreCase))
                {
                    ChannelNotifications[key] = ChatNotification.MentionsUsername;
                    await InvokeAsync(StateHasChanged);
                    return;
                }

                string[] refKeyWords =
                {
                    "ref",
                    "referee"
                };

                if (priv.Recipient.StartsWith("#mp_"))
                {
    // New message in referee lobby
                    if (refKeyWords.Any(k => priv.Content.Contains(k, StringComparison.OrdinalIgnoreCase)))
                    {
                        ChannelNotifications[key] = ChatNotification.MentionsRefereeKeywords;
                    }
                    else
                    {
                        ChannelNotifications[key] = ChatNotification.GeneralMessage;
                    }
                }
                else
                {
    // New message in general channel
                    ChannelNotifications[key] = ChatNotification.GeneralMessage;
                }
            }

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task JoinDefaultChannels()
    {
    // Every channel added here also needs to be added to the notifications dict
        await Client.QueryUserAsync("BanchoBot");

#if DEBUG
        var mp = new MultiplayerLobby(Client, 12345, "OWC: (United States) Vs. (Germany)");
        mp.Players.Add(new MultiplayerPlayer(mp, "mrekk", 1, TeamColor.Red, Mods.NoFail | Mods.Hidden | Mods.HardRock)
        {
            State = PlayerState.NoMap
        });
        mp.Players.Add(new MultiplayerPlayer(mp, "lifeline", 2, TeamColor.Red)
        {
            State = PlayerState.Ready
        });
        mp.Players.Add(new MultiplayerPlayer(mp, "Rimuru", 3, TeamColor.Red, Mods.Easy | Mods.Flashlight |
                                                                             Mods.Hidden | Mods.NoFail));
        mp.Players.Add(new MultiplayerPlayer(mp, "aetrna", 4, TeamColor.Red));
        mp.Players.Add(new MultiplayerPlayer(mp, "BlackDog5", 5, TeamColor.Red));
        mp.Players.Add(new MultiplayerPlayer(mp, "shimon", 6, TeamColor.Red));
        mp.Players.Add(new MultiplayerPlayer(mp, "Utami", 7, TeamColor.Red, Mods.HardRock));
        mp.Players.Add(new MultiplayerPlayer(mp, "Mathi", 8, TeamColor.Red, Mods.Relax));
        mp.Players.Add(new MultiplayerPlayer(mp, "femboy tummy", 9, TeamColor.Blue, Mods.Perfect | Mods.Hidden));
        mp.Players.Add(new MultiplayerPlayer(mp, "Arnold24x24", 10, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "Chicony", 11, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "NyanPotato", 12, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "WindowLife", 13, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "Bocchi the Rock", 14, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "Rafis", 15, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "maliszewski", 16, TeamColor.Blue));
        Client.Channels.Add(mp);
        ChannelNotifications.TryAdd("#mp_12345", ChatNotification.None);
#endif
    }

    public record ModDisplay(Color Color, string Abbreviation, string Tooltip);

}