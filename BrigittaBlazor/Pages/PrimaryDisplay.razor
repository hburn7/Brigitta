@page "/primarydisplay"
@using BanchoSharp.Interfaces
@using Brigitta.Extensions

@attribute [Authorize]

@inject IBanchoClient Client
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inject ILogger<PrimaryDisplay> Logger

@functions {

    private async Task ScrollToBottom(string divId)
    {
        if (_autoScroll)
        {
            await JS.InvokeVoidAsync("scrollToBottom", divId);
        }
    }
}

<MudStack>
    <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">This view is incomplete. Expect bugs.</MudAlert>
    <MudGrid Spacing="20">
        <MudPaper Width="60%">
            <div id="@_consoleDivId" style="overflow: auto; height: 400px;">
                <MudContainer>
                    @if (_currentlySelectedChannel != null)
                    {
                        foreach (var message in ((IChatChannel)_currentlySelectedChannel).MessageHistory)
                        {
                            if (message is not IPrivateIrcMessage priv)
                            {
                                continue;
                            }
                        
                            @if (_utcTime)
                            {
                                <MudText Style="word-wrap: anywhere" Inline="true">@(priv.ToUTCTimeString() + " ")</MudText>
                            }
                            else
                            {
                                <MudText Style="word-wrap: anywhere" Inline="true">@(priv.ToTimeString() + " ")</MudText>
                            }
                        
                            <MudText Inline="true"> </MudText>
                        
                            <MudLink Underline="Underline.Hover" Color="@GetUsernameColor(priv.Sender)"
                                     Href="@GetUsernameLink(priv.Sender)" Target="blank">
                                <MudText Style="word-wrap: anywhere" Inline="true" Color="@GetUsernameColor(priv.Sender)">@priv.Sender</MudText>
                            </MudLink>
                            <MudText Style="word-wrap: anywhere" Inline="true">@priv.Content</MudText>
                            <MudText/>
                        }
                    }
                </MudContainer>
            </div>

            <MudTextField @ref="RefEntryField" @bind-Value="_textChatValue" Label="Send a message" Immediate="true"
                          Variant="Variant.Outlined" T="string"
                          Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Send" AdornmentColor="Color.Success"
                          OnKeyDown="OnTextChatSend" OnAdornmentClick="ForceChatSend"/>
        </MudPaper>
        <MudPaper Width="15%">
            <MudList Clickable="true" @bind-SelectedValue="_currentlySelectedChannel"
                     Style="overflow-y: scroll; height: 400px">
                @foreach (var channel in Client.Channels)
                {
                    <MudListItem Value="@channel" Icon="@Icons.Material.Outlined.Chat"
                                 OnClick="() => ScrollConsoleToBottom(5)">
                        @channel.ChannelName
                    </MudListItem>
                }
            </MudList>
            <MudTooltip Text="Add channel">
                <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Large" Color="Color.Success"/>
            </MudTooltip>
            
            <MudTooltip Text="@_autoScrollToolTip">
                <MudToggleIconButton @bind-Toggled="_autoScroll" Icon="@Icons.Material.Filled.ArrowDownward"
                                     Size="Size.Large" ToggledSize="Size.Large"
                                     ToggledColor="Color.Success" ToggledIcon="@Icons.Material.Filled.ArrowCircleDown"/>
            </MudTooltip>
            
            <MudSwitch @bind-Checked="_utcTime" Color="Color.Info" Label="UTC Time"/>
        </MudPaper>
        
        @if (_currentlySelectedChannel is IMultiplayerLobby mp && mp.ChannelName.StartsWith("#mp_"))
        {
            // We are inside of a multiplayer lobby channel.
            <MudPaper Width="25%">
                <MudText>Size: @mp.Size</MudText>
                <MudText>Players: @mp.PlayerCount</MudText>
            </MudPaper>
        }
        
    </MudGrid>
</MudStack>


@code {
    private string? _textChatValue;
    private object? _currentlySelectedChannel;
    private IChatChannel? _castedCurrentlySelectedChannel => (IChatChannel?)_currentlySelectedChannel;
    
    private bool _autoScroll = true;
    private bool _utcTime = false;
    
    private string _autoScrollToolTip => _autoScroll ? "AutoScroll (currently enabled)" : "AutoScroll (currently disabled)";
    private MudTextField<string> RefEntryField;
    private string _consoleDivId => "console";

    protected override void OnInitialized()
    {
        Client.OnMessageReceived += async m =>
        {
            if (m is IPrivateIrcMessage priv)
            {
                Logger.LogDebug($"Private message received: {priv}");

                if (_castedCurrentlySelectedChannel == null)
                {
                    return;
                }
                
                if ((priv.IsDirect && priv.Sender.Equals(_castedCurrentlySelectedChannel.ChannelName)) ||
                    (!priv.IsDirect && priv.Recipient.Equals(_castedCurrentlySelectedChannel.ChannelName)))
                {
                    await InvokeAsync(StateHasChanged);
                }
            }
        };
        Client.OnPrivateMessageSent += async _ => await ScrollConsoleToBottom();
        Client.OnPrivateMessageReceived += async _ => await ScrollConsoleToBottom();

        Client.OnChannelJoined += async channel => { await InvokeAsync(StateHasChanged); };
        Client.OnChannelParted += async channel => { await InvokeAsync(StateHasChanged); };

        Client.BanchoBotEvents.OnTournamentLobbyCreated += lobby =>
        {
            Snackbar.Add($"Created the tournament match: {lobby.Name}", Severity.Info);
            
            // Register lobby events
            lobby.OnMatchStarted += () => Snackbar.Add($"Match started: {lobby.Name}", Severity.Info);
            lobby.OnMatchFinished += () => Snackbar.Add($"Match finished: {lobby.Name}", Severity.Info);
            lobby.OnMatchAborted += () => Snackbar.Add($"Match aborted: {lobby.Name}", Severity.Warning);
            lobby.OnClosed += () => Snackbar.Add($"Lobby closed: {lobby.Name}", Severity.Info);
        };
        
        
        
        Client.JoinChannelAsync("#osu");
        Client.QueryUserAsync("BanchoBot");
        _currentlySelectedChannel = Client.GetChannel("BanchoBot") ?? Client.Channels.FirstOrDefault();
    }

    private async Task ForceChatSend() => await OnTextChatSend(new KeyboardEventArgs
    {
        Key = "Enter"
    });

    private async Task OnTextChatSend(KeyboardEventArgs args)
    {
        if (args.Key is "Enter" or "NumppadEnter")
        {
            RefEntryField.TextUpdateSuppression = false;

            await Client.SendPrivateMessageAsync(((IChatChannel)_currentlySelectedChannel).ChannelName, _textChatValue);
            Logger.LogDebug($"Message sent: '{_textChatValue}' to {_currentlySelectedChannel}");

            _textChatValue = string.Empty;
            await InvokeAsync(StateHasChanged);
            await Task.Run(async () =>
            {
                await Task.Delay(150);
                RefEntryField.TextUpdateSuppression = true;
            });
        }
    }

    private async Task ScrollConsoleToBottom(int? delaySeconds = 0)
    {
        if (delaySeconds.HasValue)
        {
            await Task.Delay(delaySeconds.Value);
        }

        await ScrollToBottom(_consoleDivId);
    }

    private async Task AddChannelAsync()
    {
        
    }
    
    private string GetUsernameLink(string username) => $"https://osu.ppy.sh/u/{username}";

    private Color GetUsernameColor(string username)
    {
        string loggedInUsername = Client.ClientConfig.Credentials.Username;
        switch (username)
        {
            case "BanchoBot":
                return Color.Warning;
            default:
            {
                if (username == loggedInUsername)
                {
                    return Color.Primary;
                }
                break;
            }
        }
        return Color.Success;
    }
}