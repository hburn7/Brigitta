@page "/primarydisplay"
@using BrigittaBlazor.Extensions
@using BanchoSharp.Interfaces
@using BanchoSharp.Multiplayer
@using Humanizer
@using Humanizer.Localisation
@using System.Text
@using BrigittaBlazor.Utils
@using BrigittaBlazor.Derivatives

@attribute [Authorize]

@inject IBanchoClient Client
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inject ILogger<PrimaryDisplay> Logger
@inject IDialogService DialogService

@functions {

    private async Task ScrollToBottom(string divId)
    {
        if (_autoScroll)
        {
            try
            {
                await JS.InvokeVoidAsync("scrollToBottom", divId);
            }
            catch (Exception)
            {
    //  
            }
        }
    }

}

<MudGrid Spacing="2" Style="margin-top: -50px">
<MudItem xs="12">
    <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined">Brigitta is still in an early access state. Please use a secondary IRC client as a backup.</MudAlert>
</MudItem>
<MudItem xs="12" sm="8" lg="5">
    <MudPaper Class="pa-2">
        <div id="@_consoleDivId" Class="overflow-scroll" style="height: 400px; overflow-x: hidden;">
            @if (_currentlySelectedChannel != null)
            {
                <MudGrid Spacing="1">
                    @foreach (var message in ((IChatChannel)_currentlySelectedChannel).MessageHistory!)
                    {
                        if (message is not IPrivateIrcMessage priv)
                        {
                            continue;
                        }

                        <MudItem xs="2">
                            @if (_timestampsInChat)
                            {
                                @if (_utcTime)
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Inherit"
                                             Style="word-wrap: break-word; font-family: Consolas, monospace">
                                        @($"[{priv.ToUTCTimeString()}]")
                                    </MudText>
                                }
                                else
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Inherit"
                                             Style="word-wrap: break-word; font-family: Consolas, monospace;">
                                        @($"[{priv.ToTimeString()}]")
                                    </MudText>
                                }
                            }
                        </MudItem>
                        <MudItem xs="3" sm="2" md="3">
                            <MudLink Underline="Underline.Hover" Style=@($"color: {GetUsernameColor(priv.Sender)};")
                                     Href="@GetUsernameLink(priv.Sender)" Target="blank">
                                <MudText Typo="Typo.body2"
                                         Align="Align.Right" Style=@($"word-wrap: break-word; color: {GetUsernameColor(priv.Sender)};")>
                                    @priv.Sender
                                </MudText>
                            </MudLink>
                        </MudItem>
                        <MudItem xs="7">
                            <MudText Typo="Typo.body2">@priv.Content</MudText>
                        </MudItem>
                    }
                </MudGrid>
            }
        </div>
        <MudPaper>
            <MudTextField @ref="RefEntryField" @bind-Value="_textChatValue" Label="Send a message" Immediate="true"
                          Variant="Variant.Outlined" T="string"
                          Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Send" AdornmentColor="Color.Success"
                          OnKeyDown="OnTextChatSend" OnAdornmentClick="ForceChatSend"/>
        </MudPaper>
    </MudPaper>
</MudItem>
@*Channel list, associated button row*@
<MudItem xs="12" sm="4" lg="3">
    <MudPaper Class="pa-2">
        <MudGrid>
            <MudItem xs="12">
                <MudList Clickable="true" @bind-SelectedValue="_currentlySelectedChannel" Style="height: 400px">
                    @foreach (var channel in Client.Channels)
                    {
                        <MudListItem Icon="@Icons.Material.Outlined.Chat"
                                     Value="@channel" OnClick="() => ScrollConsoleToBottom(5)"
                                     Dense="Client.Channels.Count >= 8">
                            @channel.ChannelName
                        </MudListItem>
                    }
                </MudList>
            </MudItem>
            <MudItem xs="12">
                <MudGrid Spacing="1">
                    <MudItem>
                        <MudTooltip Text="Add channel">
                            <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Medium" Color="Color.Success"
                                           OnClick="@OpenAddChannelDialog"/>
                        </MudTooltip>
                    </MudItem>
                    <MudItem>
                        <MudTooltip Text="@_autoScrollToolTip">
                            <MudToggleIconButton @bind-Toggled="_autoScroll" Icon="@Icons.Material.Filled.ArrowDownward"
                                                 Size="Size.Medium" ToggledSize="Size.Medium"
                                                 ToggledColor="Color.Success" ToggledIcon="@Icons.Material.Filled.ArrowCircleDown"/>
                        </MudTooltip>
                    </MudItem>
                    <MudItem>
                        <MudTooltip Text="Display timestamps in chat">
                            <MudToggleIconButton @bind-Toggled="@_timestampsInChat" ToggledIcon="@Icons.Material.Filled.Watch"
                                                 ToggledColor="Color.Success" Color="Color.Inherit" Size="Size.Medium" ToggledSize="Size.Medium"
                                                 Icon="@Icons.Material.Filled.WatchOff"/>
                        </MudTooltip>
                    </MudItem>
                    <MudItem>
                        <MudTooltip Text="Display times in UTC+0">
                            <MudToggleIconButton ToggledIcon="@Icons.Material.Filled.EventAvailable"
                                                 Icon="@Icons.Material.Filled.EventBusy" @bind-Toggled="@_utcTime"
                                                 ToggledColor="Color.Success" Color="Color.Inherit"
                                                 Size="Size.Medium" ToggledSize="Size.Medium"/>
                        </MudTooltip>
                    </MudItem>
                    <MudItem>
                        <MudTooltip Text=@($"Download chat log for {_currentlySelectedChannel ?? "(no channel selected)"}")>

                            <MudIconButton Icon="@Icons.Material.Filled.FileDownload" Size="Size.Medium" Color="Color.Inherit"
                                           OnClick="@(DownloadChatHistoryAsync)"/>
                        </MudTooltip>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudItem>

@*Multiplayer lobby information*@
@if (_currentlySelectedLobby != null)
{
    // We are inside of a multiplayer lobby channel.
    <MudItem xs="12" lg="4">
        <MudGrid Spacing="2">
            <MudItem xs="12" sm="6" lg="12">
                <MudPaper Class="pa-2">
                    <MudGrid Spacing="2">
                        <MudItem>
                            <MudIcon Icon="@Icons.Material.Filled.DriveFileRenameOutline"/>
                            <MudLink Href="@_currentlySelectedLobby.HistoryUrl" Underline="Underline.Hover" Color="Color.Primary" Target="blank">
                                <MudText Inline="true">
                                    <b>@_currentlySelectedLobby.Name</b>
                                </MudText>
                            </MudLink>
                        </MudItem>
                        <MudItem>
                            <MudGrid Spacing="1">
                                <MudItem>
                                    <MudIcon Icon="@Icons.Material.Filled.Numbers"/>
                                    <MudText Inline="true">
                                        <b>Size:</b> @_currentlySelectedLobby.Size
                                    </MudText>
                                </MudItem>
                                <MudItem>
                                    <MudIcon Icon="@Icons.Material.Filled.PeopleAlt"/>
                                    <MudText Inline="true">
                                        <b>Players:</b> @_currentlySelectedLobby.PlayerCount
                                    </MudText>
                                </MudItem>
                                <MudItem>
                                    <MudIcon Icon="@Icons.Material.Filled.HourglassBottom"/>
                                    <MudText Inline="true">@(_currentlySelectedLobby.LobbyTimerInProgress ? _currentlySelectedLobby.LobbyTimerRemaining.ToFormattedDuration() : "No timer active")</MudText>
                                </MudItem>
                                <MudItem>
                                    @*Format*@
                                    <MudIcon Icon="@Icons.Material.Filled.AssignmentTurnedIn"/>
                                    <MudText Inline="true">
                                        <b>Format:</b> @_currentlySelectedLobby.Format
                                    </MudText>
                                </MudItem>
                                <MudItem>
                                    @*Win condition*@
                                    <MudIcon Icon="@Icons.Material.Filled.Flag"/>
                                    <MudText Inline="true">
                                        <b>WC:</b> @_currentlySelectedLobby.WinCondition
                                    </MudText>
                                </MudItem>
                                <MudItem>
                                    @*Gamemode*@
                                    <MudIcon Icon="@Icons.Material.Filled.VideogameAsset"/>
                                    <MudText Inline="true">
                                        <b>Mode:</b> @_currentlySelectedLobby.GameMode
                                    </MudText>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" lg="12">
                <MudPaper Class="pa-2">
                    <MudGrid Spacing="2">
                        <MudItem>
                            <MudNumericField @bind-Value="@_mpTimerValue" Label="Timer Seconds" Variant="Variant.Outlined" Min="0" Max="600" Step="30"/>
                        </MudItem>
                        <MudItem>
                            <MudNumericField @bind-Value="@_mpMatchTimerValue" Label="Match Start Timer Seconds" Variant="Variant.Outlined" Min="5" Max="60" Step="5"/>
                        </MudItem>
                    </MudGrid>

                    <MudGrid Spacing="2">
                        <MudItem>
                            <MudTooltip Text="Start a timer">
                                <MudIconButton Color="Color.Inherit" OnClick="@(() => _currentlySelectedLobby.SetTimerAsync(_mpTimerValue))"
                                               Icon="@Icons.Material.Filled.HourglassBottom" Size="Size.Medium"/>
                            </MudTooltip>
                        </MudItem>
                        <MudItem>
                            <MudTooltip Text="Start a match timer">
                                <MudIconButton Color="Color.Error" OnClick="@(() => _currentlySelectedLobby.SetMatchStartTimerAsync(_mpMatchTimerValue))"
                                               Icon="@Icons.Material.Filled.HourglassBottom" Size="Size.Medium"/>
                            </MudTooltip>
                        </MudItem>


                        <MudItem>
                            @*Refresh !mp settings*@
                            <MudTooltip Text="!mp settings">
                                <MudIconButton Icon="@Icons.Material.Filled.SettingsBackupRestore"
                                               OnClick="@(async () => await _currentlySelectedLobby.RefreshSettingsAsync())" Size="Size.Medium"/>
                            </MudTooltip>
                        </MudItem>

                        <MudItem>
                            <MudTooltip Text="Locks / unlocks the lobby. If the lobby is locked, players cannot change slots at will.">
                                @*Abort timer*@
                                @if (_currentlySelectedLobby.IsLocked)
                                {
                                    <MudIconButton Color="Color.Inherit" Icon="@Icons.Material.Filled.LockOpen"
                                                   OnClick="@(async () => await _currentlySelectedLobby.UnlockAsync())" Size="Size.Medium"/>
                                }
                                else
                                {
                                    <MudIconButton Color="Color.Warning" Icon="@Icons.Material.Filled.LockPerson"
                                                   OnClick="@(async () => await _currentlySelectedLobby.LockAsync())" Size="Size.Medium"/>
                                }
                            </MudTooltip>
                        </MudItem>

                        <MudItem>
                            <MudTooltip Text="Abort the current timer, if there is one">
                                @*Abort timer*@
                                <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.HourglassDisabled"
                                               OnClick="@(async () => await _currentlySelectedLobby.AbortTimerAsync())" Size="Size.Medium"/>
                            </MudTooltip>
                        </MudItem>

                        <MudItem>
                            <MudTooltip Text="Abort the match">
                                @*Abort lobby*@
                                <MudIconButton Color="Color.Error"
                                               OnClick="@(async () => await _currentlySelectedLobby.AbortAsync())" Icon="@Icons.Material.Filled.Dangerous" Size="Size.Medium"/>
                            </MudTooltip>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudItem xs="12">
        <MudPaper>
            @*Player display*@
            <MudGrid Class="overflow-scroll" Style="max-height: 375px;" Justify="Justify.SpaceAround" Spacing="1">
                @foreach (var player in _currentlySelectedLobby.Players.OrderBy(x => x.Slot))
                {
                    var statusDisplay = new PlayerStatusDisplay(player);
                    <MudItem>
                        <MudListItem Value="@player">
                            <MudBadge Origin="Origin.TopRight" Icon="@statusDisplay.StatusIcon"
                                      Color="@statusDisplay.StatusColor" Overlap="true">
                                <MudTooltip Text=@GetPlayerTooltip(player) Placement="Placement.Top">
                                    <MudPaper Class="pa-2">
                                        <MudStack Row="false" Justify="Justify.Center">
                                            <MudItem xs="12">
                                                <MudLink Href="@statusDisplay.Url" Target="blank">
                                                    <MudImage src="@($"http://s.ppy.sh/a/{player.Id ?? 1}")" Width="48" Height="48" Elevation="25" Class="rounded-sm"/>
                                                    <MudText Color="@statusDisplay.PlayerTeamColor">@player.Name</MudText>
                                                </MudLink>
                                            </MudItem>
                                            <MudItem xs="12">
                                                <MudIcon Icon="@Icons.Material.Filled.Casino"/>
                                                <MudText Inline="true">Mods: @player.Mods.ToAbbreviatedForm()</MudText>
                                            </MudItem>
                                        </MudStack>
                                    </MudPaper>
                                </MudTooltip>
                            </MudBadge>
                        </MudListItem>
                    </MudItem>
                }
            </MudGrid>
        </MudPaper>
    </MudItem>
}
</MudGrid>

@* Add channel dialog *@
<MudDialog @bind-IsVisible="_addChannelDialogIsVisible" Options="_dialogOptions">
    <DialogContent>
        <p>Add a channel</p>
        <MudTextField Label="Channel" T="string" @bind-Value="_addChannelDialogValue"
                      Validation="@(new Func<string, IEnumerable<string>>(AddChannelValidation))"/>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="CloseAddChannelDialog">Cancel</MudButton>
        <MudButton Color="Color.Success" OnClick="AddChannelAsync">Add</MudButton>
    </DialogActions>
</MudDialog>


@code {
    // Dialogs
    private readonly DialogOptions _dialogOptions = new()
    {
        CloseOnEscapeKey = true
    };
    private bool _addChannelDialogIsVisible;

    private void OpenAddChannelDialog()
    {
        _addChannelDialogIsVisible = true;
        _addChannelDialogValue = "";
    }

    private void CloseAddChannelDialog() => _addChannelDialogIsVisible = false;
    private string _addChannelDialogValue;
    private string? _textChatValue;
    private object? _currentlySelectedChannel;
    // private object? _currentlySelectedPlayer;
    private IChatChannel? _castedCurrentlySelectedChannel => (IChatChannel?)_currentlySelectedChannel;
    private IMultiplayerLobby? _currentlySelectedLobby => _currentlySelectedChannel is IMultiplayerLobby mp ? mp : null;
    private bool _autoScroll = true;
    private bool _timestampsInChat = true;
    private bool _utcTime;
    private string _autoScrollToolTip => _autoScroll ? "AutoScroll (currently enabled)" : "AutoScroll (currently disabled)";
    private MudTextField<string> RefEntryField;
    private string _consoleDivId => "console";
    private int _mpTimerValue = 120;
    private int _mpMatchTimerValue = 5;

    protected override void OnInitialized()
    {
        Client.OnMessageReceived += async m =>
        {
            if (m is IPrivateIrcMessage priv)
            {
                Logger.LogDebug($"Private message received: {priv}");

                if (_castedCurrentlySelectedChannel == null)
                {
                    return;
                }

                if ((priv.IsDirect && priv.Sender.Equals(_castedCurrentlySelectedChannel.ChannelName)) ||
                    (!priv.IsDirect && priv.Recipient.Equals(_castedCurrentlySelectedChannel.ChannelName)))
                {
                    await InvokeAsync(StateHasChanged);
                }
            }
        };
        Client.OnPrivateMessageSent += async _ => await ScrollConsoleToBottom();
        Client.OnPrivateMessageReceived += async msg =>
        {
            if (_castedCurrentlySelectedChannel?.ChannelName.Equals(msg.Sender) ?? false)
            {
                await ScrollConsoleToBottom();
            }
        };

        Client.OnAuthenticatedUserDMReceived += async _ => await InvokeAsync(StateHasChanged);

        Client.OnChannelJoined += async channel =>
        {
            Snackbar.Add($"Joined channel {channel}", Severity.Success);
    // _currentlySelectedChannel = channel;

            await InvokeAsync(StateHasChanged);
        };

        Client.OnUserQueried += async user =>
        {
            Snackbar.Add($"Opened conversation with {user}", Severity.Success);
            await InvokeAsync(StateHasChanged);
        };

        Client.OnChannelParted += async channel =>
        {
            if (_currentlySelectedChannel.Equals(channel))
            {
                _currentlySelectedChannel = Client.Channels.LastOrDefault();
            }

            await InvokeAsync(StateHasChanged);
        };

        Client.OnChannelJoinFailure += async channel =>
        {
            Snackbar.Add($"Failed to join channel {channel}", Severity.Error);
            await InvokeAsync(StateHasChanged);

            if (_currentlySelectedChannel.Equals(channel))
            {
                _currentlySelectedChannel = Client.Channels.LastOrDefault();
            }
        };

        Client.BanchoBotEvents.OnTournamentLobbyCreated += lobby =>
        {
            Snackbar.Add($"Created the tournament match: {lobby.Name}", Severity.Info);

    // Register lobby events
            lobby.OnMatchStarted += () => Snackbar.Add($"Match started: {lobby.Name}", Severity.Info);
            lobby.OnMatchFinished += () => Snackbar.Add($"Match finished: {lobby.Name}", Severity.Info);
            lobby.OnMatchAborted += () => Snackbar.Add($"Match aborted: {lobby.Name}", Severity.Warning);
            lobby.OnClosed += () => Snackbar.Add($"Lobby closed: {lobby.Name}", Severity.Info);
            lobby.OnStateChanged += async () =>
            {
                await InvokeAsync(StateHasChanged);

                if (lobby.LobbyTimerInProgress)
                {
                    await Task.Run(async () =>
                    {
                        while (lobby.LobbyTimerInProgress && !lobby.IsClosed)
                        {
                            await Task.Delay(1000);
                            await InvokeAsync(StateHasChanged);
                        }
                    });
                }
            };
        };

        Task.Run(async () => await JoinDefaultChannels());

        _currentlySelectedChannel = Client.GetChannel("BanchoBot") ?? Client.Channels.FirstOrDefault();
    }

    private async Task JoinDefaultChannels()
    {
        await Client.JoinChannelAsync("#english");
        await Client.JoinChannelAsync("#osu");
        await Client.QueryUserAsync("BanchoBot");
#if DEBUG
        var mp = new MultiplayerLobby(Client, 12345, "OWC: (United States) Vs. (Germany)");
        mp.Players.Add(new MultiplayerPlayer(mp, "mrekk", 1, TeamColor.Red, Mods.NoFail | Mods.Hidden | Mods.HardRock));
        mp.Players.Add(new MultiplayerPlayer(mp, "lifeline", 2, TeamColor.Red));
        mp.Players.Add(new MultiplayerPlayer(mp, "Rimuru", 3, TeamColor.Red, Mods.Easy | Mods.Flashlight |
                                                                             Mods.Hidden | Mods.NoFail));
        mp.Players.Add(new MultiplayerPlayer(mp, "aetrna", 4, TeamColor.Red));
        mp.Players.Add(new MultiplayerPlayer(mp, "BlackDog5", 5, TeamColor.Red));
        mp.Players.Add(new MultiplayerPlayer(mp, "shimon", 6, TeamColor.Red));
        mp.Players.Add(new MultiplayerPlayer(mp, "Utami", 7, TeamColor.Red, Mods.HardRock));
        mp.Players.Add(new MultiplayerPlayer(mp, "Mathi", 8, TeamColor.Red, Mods.Relax));
        mp.Players.Add(new MultiplayerPlayer(mp, "femboy tummy", 9, TeamColor.Blue, Mods.Perfect | Mods.Hidden));
        mp.Players.Add(new MultiplayerPlayer(mp, "Arnold24x24", 10, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "Chicony", 11, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "NyanPotato", 12, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "WindowLife", 13, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "Bocchi the Rock", 14, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "Rafis", 15, TeamColor.Blue));
        mp.Players.Add(new MultiplayerPlayer(mp, "maliszewski", 16, TeamColor.Blue));
        Client.Channels.Add(mp);
#endif
    }

    private async Task DownloadChatHistoryAsync()
    {
        if (_castedCurrentlySelectedChannel == null)
        {
            return;
        }

        if (!_castedCurrentlySelectedChannel.MessageHistory!.Any())
        {
            Snackbar.Add("Download cancelled: no messages to download", Severity.Warning);
            return;
        }

        var timeDelta = _castedCurrentlySelectedChannel.MessageHistory!.Last!.Value.Timestamp -
                        _castedCurrentlySelectedChannel.MessageHistory.First!.Value.Timestamp;
        var sb = new StringBuilder($"---- Chat log of {_castedCurrentlySelectedChannel.ChannelName} generated by Brigitta ----\n");
        sb.AppendLine($"---- Log spans {timeDelta.Humanize(3, minUnit: TimeUnit.Second)}, " +
                      $"beginning at {_castedCurrentlySelectedChannel.MessageHistory!.First!.Value.Timestamp:R} ----");
        sb.AppendLine("---- BEGIN LOG ----");
        foreach (var ircMessage in _castedCurrentlySelectedChannel.MessageHistory!)
        {
            if (ircMessage is not IPrivateIrcMessage message)
            {
                continue;
            }

            if (_utcTime)
            {
                sb.AppendLine(message.ToUTCTimeString());
            }
            else
            {
                sb.AppendLine(message.ToDisplayString());
            }
        }
        sb.AppendLine("---- END LOG ----");

        await FileUtils.DownloadAs(JS, $"{DateTime.Now.ToUniversalTime().ToFileTimeString()}-" +
                                       $"{_castedCurrentlySelectedChannel.ChannelName}.txt",
            Encoding.UTF8.GetBytes(sb.ToString()));
    }

    private string GetPlayerTooltip(IMultiplayerPlayer player) => player.IsReady ?
        $"[{player.Name} | Slot #{player.Slot}] is ready to play!" :
        $"[{player.Name} | Slot #{player.Slot}] is not ready.";

    private async Task ForceChatSend() => await OnTextChatSend(new KeyboardEventArgs
    {
        Key = "Enter"
    });

    private async Task OnTextChatSend(KeyboardEventArgs args)
    {
        if (args.Key is not ("Enter" or "NumppadEnter") || string.IsNullOrWhiteSpace(_textChatValue))
        {
            return;
        }

        if (_textChatValue.StartsWith("/"))
        {
            var slashCommandHandler = new CustomCommandHandler(_textChatValue);
            if (slashCommandHandler is { Command: {}, IsBanchoCommand: true })
            {
    // Deploy directly to the server
    // TODO: needs documentation
                switch (slashCommandHandler.Command.ToLower())
                {
                    case "j":
                    case "join":
                    case "query":
                    {
                        if (!slashCommandHandler.Parameters?.Any() ?? true)
                        {
                            Snackbar.Add("Invalid arguments for /join", Severity.Error);
                            break;
                        }
                        await Client.JoinChannelAsync(slashCommandHandler.Parameters[0]);
                        break;
                    }
                    case "p":
                    case "part":
                    case "close":
                    case "leave":
                    {
                        if (!slashCommandHandler.Parameters?.Any() ?? true)
                        {
                            if (_castedCurrentlySelectedChannel == null)
                            {
                                Snackbar.Add("Cannot determine channel to part. No channel selected.", Severity.Error);
                                break;
                            }

                            await Client.PartChannelAsync(_castedCurrentlySelectedChannel.ChannelName);
                            break;
                        }
                        await Client.PartChannelAsync(slashCommandHandler.Parameters[0]);
                        break;
                    }
                    case "me":
                    {
                        Snackbar.Add("This command is not yet supported.", Severity.Warning);
                        break;
                    }
                    default:
                        await Client.SendAsync(_textChatValue[1..]);
                        Snackbar.Add($"Executed {_textChatValue}", Severity.Info);
                        break;
                }

    // We've now handled the command, clear the chat field and return
                await ClearChatEntryField();
                return;
            }

            if (slashCommandHandler is { Command: {}, IsBanchoCommand: false})
            {
    // Process custom command
                var command = slashCommandHandler.CustomCommand;
                if (command != null)
                {
                    switch (command.Value.Command.ToLower())
                    {
                        case "clear":
                            await command.Value.Execute(new Func<IChatChannel?, Task>(channel =>
                            {
                                if (channel == null)
                                {
                                    return Task.CompletedTask;
                                }

                                channel.MessageHistory!.Clear();
                                return Task.CompletedTask;
                            }), _castedCurrentlySelectedChannel);
                            break;
                        case "chat":
                            if (!slashCommandHandler.Parameters?.Any() ?? true)
                            {
                                break;
                            }

                            string? recipient = slashCommandHandler.Parameters?[0];
                            string message = string.Join(" ", slashCommandHandler.Parameters?[1..] ?? Array.Empty<string>()).Trim();

                            if (recipient == null)
                            {
                                break;
                            }

                            await command.Value.Execute(new Func<string, string?, Task>(async (r, m) =>
                            {
                                if (r.StartsWith("#"))
                                {
    // Recipient is a channel
                                    await Client.JoinChannelAsync(r);
                                }
                                else
                                {
    // Recipient is a Bancho user
                                    await Client.QueryUserAsync(r);
                                }

    // Message exists? Message the channel or user
                                if (!string.IsNullOrWhiteSpace(m))
                                {
                                    await Client.SendPrivateMessageAsync(r, m);
                                }
                            }), recipient, message);
                            break;
                    }

    // Finally, clear the chat channel and return since we've handled the command.
                    await ClearChatEntryField();
                    return;
                }
            }
        }

    // It's okay to handle slash commands without a selected
    // channel in some cases, but never for regular messages
        if (_currentlySelectedChannel == null)
        {
            return;
        }

        await Client.SendPrivateMessageAsync(((IChatChannel)_currentlySelectedChannel).ChannelName, _textChatValue);
        Logger.LogDebug($"Message sent: '{_textChatValue}' to {_currentlySelectedChannel}");

        await ScrollConsoleToBottom(5);
        await ClearChatEntryField();
        await InvokeAsync(StateHasChanged);
    }

    private async Task ClearChatEntryField()
    {
        RefEntryField.TextUpdateSuppression = false;
        _textChatValue = string.Empty;

        await InvokeAsync(StateHasChanged);
        await Task.Run(async () =>
        {
            await Task.Delay(150);
            RefEntryField.TextUpdateSuppression = true;
        });
    }

    private IEnumerable<string> AddChannelValidation(string channel)
    {
        if (string.IsNullOrWhiteSpace(channel))
        {
            yield return "Channel name must not be empty.";
        }
    }

    private async Task ScrollConsoleToBottom(int? delayMilliseconds = 0)
    {
        if (delayMilliseconds.HasValue)
        {
            await Task.Delay(delayMilliseconds.Value);
        }

        await ScrollToBottom(_consoleDivId);
    }

    private async Task AddChannelAsync()
    {
        await Client.JoinChannelAsync(_addChannelDialogValue);
        CloseAddChannelDialog();
    }

    private string GetUsernameLink(string username) => $"https://osu.ppy.sh/u/{username}";

    private string GetUsernameColor(string username)
    {
        string loggedInUsername = Client.ClientConfig.Credentials.Username;
        switch (username)
        {
            case "BanchoBot":
                return Colors.Pink.Lighten2;
            default:
            {
                if (username == loggedInUsername)
                {
                    return Colors.Cyan.Lighten1;
                }
                break;
            }
        }
        return Colors.Blue.Lighten1;
    }

    public class PlayerStatusDisplay
    {
        private readonly IMultiplayerPlayer _player;
        public PlayerStatusDisplay(IMultiplayerPlayer player) { _player = player; }
        public Color StatusColor => GetStatusColor();
        public Color PlayerTeamColor => GetTeamColor();
        public string StatusIcon => GetStatusIcon();
        public string Url => GetPlayerUrl();

        private Color GetStatusColor()
        {
            if (_player.Lobby.Host?.Equals(_player) ?? false)
            {
                return Color.Primary;
            }
            if (!_player.IsReady)
            {
                return Color.Error;
            }

            return Color.Success;
        }

        private string GetStatusIcon()
        {
            if (_player.Lobby.Host?.Equals(_player) ?? false)
            {
    // Host == player, give crown
                return Icons.Material.Filled.Diamond;
            }
            if (!_player.IsReady)
            {
                return Icons.Material.Filled.Error;
            }

            return Icons.Material.Filled.Check;
        }

        private Color GetTeamColor() => _player.Team switch
        {
            TeamColor.None => Color.Inherit,
            TeamColor.Blue => Color.Info,
            TeamColor.Red => Color.Error
            };

        private string GetPlayerUrl()
        {
            if (_player.Id.HasValue)
            {
                return $"https://osu.ppy.sh/u/{_player.Id}";
            }

            return $"https://osu.ppy.sh/u/{_player.Name}";
        }
    }

}

