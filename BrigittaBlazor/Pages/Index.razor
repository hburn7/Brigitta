@page "/"
@using BanchoSharp
@using BanchoSharp.Exceptions
@using BrigittaBlazor.Auth
@using BanchoSharp.Interfaces
@using BrigittaBlazor.Utils

@inject IBanchoClient Client
@inject ILogger<Index> Logger
@inject AuthenticationStateProvider AuthStateProvider
@inject UpdaterService UpdaterService

<PageTitle>Primary Display</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Brigitta</MudText>

<MudAlert Severity="Severity.Warning">This is a very early-access Blazor port of 
    <MudLink Href="https://github.com/hburn7/Brigitta" Typo="Typo.body2" Color="Color.Inherit"><b>Brigitta</b>.</MudLink>
</MudAlert>

<AuthorizeView>
    <NotAuthorized>
        <MudText Typo="Typo.h4">IRC Login</MudText>
        <MudPaper Class="pa-4" Width="100%">
            <MudForm @ref="form" @bind-IsValid="@success">
                <MudTextField T="string" Label="osu! Username" Required="true" RequiredError="Username is required."
                              HelperText="osu! Username" @ref="username"/>
                <MudTextField T="string" Label="osu! IRC Password" Required="true" RequiredError="IRC password is required."
                              HelperText="osu! IRC Password" InputType="InputType.Password" @ref="password"/>
                <div class="d-flex">
                    <MudButton Variant="Variant.Outlined" Color="Color.Info" Class="ml-0"
                               Href="https://osu.ppy.sh/p/irc">Get IRC Password</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Success" Class="ml-auto"
                               Disabled="@(!success)" OnClick="OnSubmit">Login</MudButton>
                </div>
            </MudForm>
            <MudAlert Severity="Severity.Info">Your IRC login information is not saved.</MudAlert>
        </MudPaper>
    </NotAuthorized>
</AuthorizeView>


@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    
    bool success;
    MudTextField<string> username;
    MudTextField<string> password;
    MudForm form;
    
    private string authMessage;

    protected override async Task OnInitializedAsync()
    {
// #if !DEBUG
        if (await UpdaterService.NeedsUpdateAsync())
        {
            Logger.LogInformation("Update detected!");
        }
        else
        {
            Logger.LogInformation("You're running the latest version of Brigitta!");
        }
// #endif
    }
    
    public async Task OnSubmit()
    {
        var brigittaAuth = (BrigittaAuthStateProvider)AuthStateProvider;
        Client.ClientConfig.Credentials = new IrcCredentials(username.Text, password.Text);
        
        Logger.LogInformation($"Username: {username.Text}");
        
        Client.OnAuthenticated += async () =>
        {
            await brigittaAuth.UpdateAuthenticationStateAsync(Client);
        };

        try
        {
            await Client.ConnectAsync();
        }
        catch (IrcClientNotAuthenticatedException)
        {
            form.Reset();
        }
    }
}