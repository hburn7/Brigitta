@page "/"
@using BanchoSharp
@using BanchoSharp.Exceptions
@using BrigittaBlazor.Auth
@using BanchoSharp.Interfaces
@using BrigittaBlazor.Utils

@inject IBanchoClient Client
@inject ILogger<Index> Logger
@inject AuthenticationStateProvider AuthStateProvider
@inject UpdaterService UpdaterService
@inject ISnackbar Snackbar

<PageTitle>IRC Login</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Brigitta @("v" + UpdaterService.VERSION)</MudText>

<AuthorizeView>
    <NotAuthorized>
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudText Typo="Typo.h4">IRC Login</MudText>
                <MudPaper Class="pa-4">
                    <MudForm @ref="form" @bind-IsValid="@success">
                        <MudTextField T="string" Label="osu! Username" Required="true" RequiredError="Username is required."
                                      HelperText="osu! Username" @ref="username"/>
                        <MudTextField T="string" Label="osu! IRC Password" Required="true" RequiredError="IRC password is required."
                                      HelperText="osu! IRC Password" InputType="InputType.Password" @ref="password"/>
                        <div class="d-flex">
                            <MudButton Variant="Variant.Outlined" Color="Color.Info" Class="ml-0"
                                       Href="https://osu.ppy.sh/p/irc">Get IRC Password</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Success" Class="ml-auto"
                                       Disabled="@(!success)" OnClick="OnSubmit">Login</MudButton>
                        </div>
                    </MudForm>
                    <MudAlert Severity="Severity.Info">Your IRC login information is not saved.</MudAlert>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudText Align="Align.Left" Typo="Typo.h4">Changelog</MudText>
                <MudPaper Class="pa-4" Height="273px" Style="overflow-y: scroll;">
                    @foreach (var update in _latestUpdates)
                    {
                        <MudLink Href="@update.Url">
                            <MudText Typo="Typo.h5" Inline="true">@update.Version</MudText>
                        </MudLink>
                        <MudText/>
                        @foreach (var commit in update.Commits)
                        {
                            <MudGrid>
                                <MudItem xs="3" md="2" xl="1">
                                    <MudLink Href="@commit.Url" Target="_blank">
                                        <MudText Align="Align.Right" Typo="Typo.subtitle1" Inline="true">@commit.Hash</MudText>
                                    </MudLink>

                                </MudItem>
                                <MudItem xs="9" md="10" xl="11">
                                    <MudText Typo="Typo.subtitle1" Inline="true">@commit.Description</MudText>
                                </MudItem>
                            </MudGrid>
                            <MudText/>
                        }
                        <MudDivider Vertical="false"/>
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>
    </NotAuthorized>
</AuthorizeView>


@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    
    bool success;
    MudTextField<string> username;
    MudTextField<string> password;
    MudForm form;

    private IEnumerable<UpdateInfo> _latestUpdates = new List<UpdateInfo>();

    protected override async Task OnInitializedAsync()
    {
#if !DEBUG
        bool? needsUpdate = await UpdaterService.NeedsUpdateAsync();

        if (needsUpdate.HasValue && needsUpdate.Value)
        {
            Snackbar.Add("Brigitta is out of date! Check the changelog for more information.", Severity.Error,
                cfg =>
                {
                    cfg.VisibleStateDuration = 3000;
                    cfg.HideTransitionDuration = 500;
                });
        }
        else if(needsUpdate.HasValue && !needsUpdate.Value)
        {
            Snackbar.Add("Thanks for keeping Brigitta up to date!", Severity.Success);
        }
        else
        {
            Snackbar.Add("Unable to check for updates. Please check the logs.", Severity.Error);
        }

        try
        {
            _latestUpdates = await UpdaterService.GetRecentUpdateInfosAsync();
        }
        catch (Exception e)
        {
            // ignored
        }
#endif
    }
    
    public async Task OnSubmit()
    {
        var brigittaAuth = (BrigittaAuthStateProvider)AuthStateProvider;
        Client.ClientConfig.Credentials = new IrcCredentials(username.Text, password.Text);
        
        Logger.LogInformation($"Username: {username.Text}");
        
        Client.OnAuthenticated += async () =>
        {
            await brigittaAuth.UpdateAuthenticationStateAsync(Client);
        };

        try
        {
            await Client.ConnectAsync();
        }
        catch (IrcClientNotAuthenticatedException)
        {
            form.Reset();
        }
    }
}