@using BanchoSharp.Interfaces
@using BrigittaBlazor.Pages
@using System.Text
@inject IBanchoClient Client
@inject ISnackbar Snackbar

<MudGrid Spacing="1" Justify="Justify.SpaceAround">
    <MudItem xs="12">
        <MudText Align="Align.Center" Typo="Typo.body1">Mod Selection</MudText>
    </MudItem>
    <MudItem xs="12">
        <MudChipSet @bind-SelectedChips="_selectedMods" MultiSelection="true">
            <MudGrid Spacing="1" Justify="Justify.Center">
                @foreach (var mod in ModDisplays)
                {
                    <MudTooltip Text="@mod.Tooltip">
                        <MudItem>
                            <MudChip Color="@mod.Color" Variant="Variant.Text" Value="@mod">
                                @mod.Abbreviation
                            </MudChip>
                        </MudItem>
                    </MudTooltip>

                    @* ReSharper disable once ConvertIfStatementToSwitchStatement *@
                    if (mod.Abbreviation is "FM")
                    {
                        <MudItem>
                            <MudDivider Vertical="true"/>
                        </MudItem>
                    }

                    if (mod.Abbreviation is "HT" or "FL")
                    {
                        <MudItem xs="12">
                            <MudDivider/>
                        </MudItem>
                    }
                }
            </MudGrid>
        </MudChipSet>
    </MudItem>
    <MudDivider/>
    <MudItem xs="12">
        <MudGrid Spacing="1" Justify="Justify.SpaceAround">
            <MudItem>
                <MudButton Disabled="@(!_selectedMods?.Any() ?? false)" Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Check" OnClick="@DeployModSelectionsAsync">
                    Deploy Mods
                </MudButton>
            </MudItem>
            <MudItem>
                <MudButton Disabled="@(!_selectedMods?.Any() ?? false)" Color="Color.Error"
                           StartIcon="@Icons.Material.Filled.ClearAll" OnClick="@ClearMods">
                    Clear
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public IMultiplayerLobby? CurrentLobby { get; set; }
    private MudChip[]? _selectedMods;
    private static readonly IEnumerable<PrimaryDisplay.ModDisplay> ModDisplays = new List<PrimaryDisplay.ModDisplay>
    {
        new(Color.Info, "NM", "No Mod"),
        new(Color.Info, "FM", "Freemod"),
        new(Color.Success, "NF", "No Fail"),
        new(Color.Success, "EZ", "Easy"),
        new(Color.Success, "HT", "Half Time"),
        new(Color.Error, "HR", "Hard Rock"),
        new(Color.Surface, "SD", "Sudden Death"),
        new(Color.Primary, "DT", "Double Time"),
        new(Color.Warning, "HD", "Hidden"),
        new(Color.Surface, "FL", "Flashlight"),
        new(Color.Info, "RX", "Relax"),
        new(Color.Info, "AP", "Auto Pilot"),
        new(Color.Info, "SO", "Spun Out")
    };

    private async Task DeployModSelectionsAsync()
    {
        var sb = new StringBuilder("!mp mods ");

        if (_selectedMods == null)
        {
            return;
        }

        foreach (var mod in _selectedMods)
        {
            var display = mod.Value as PrimaryDisplay.ModDisplay;
            if (display == null)
            {
                continue;
            }

            string append = display.Abbreviation;

            if (display.Abbreviation == "FM")
            {
                append = "Freemod";
            }
            else if (display.Abbreviation == "NM")
            {
                sb = new StringBuilder("!mp mods");
                break;
            }

            sb.Append(append + " ");
        }
        if (CurrentLobby == null)
        {
            Snackbar.Add("Failed to deploy mods, no lobby selected", Severity.Error);
            await ClearMods();
            return;
        }

        await ClearMods();
        string send = sb.ToString().Trim();
        await Client.SendPrivateMessageAsync(CurrentLobby.ChannelName, send);
    }

    private async Task ClearMods()
    {
        _selectedMods = Array.Empty<MudChip>();
        await InvokeAsync(StateHasChanged);
    }

}