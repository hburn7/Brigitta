@using Humanizer
@using Humanizer.Localisation
@using System.Text
@using BrigittaBlazor.Extensions
@using BanchoSharp.Interfaces
@using BanchoSharp.Messaging.ChatMessages
@using BrigittaBlazor.Utils
@inject IJSRuntime JS
@inject IBanchoClient Client
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudGrid Spacing="1">
    <MudItem>
        <MudTooltip Text="Add channel">
            <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Medium" Color="Color.Success"
                           OnClick="@OpenChannelDialogAsync"/>
        </MudTooltip>
    </MudItem>
    <MudItem>
        <MudTooltip Text="@_autoScrollToolTip">
            <MudToggleIconButton @bind-Toggled="AutoScroll" Icon="@Icons.Material.Filled.ArrowDownward"
                                 Size="Size.Medium" ToggledSize="Size.Medium"
                                 ToggledColor="Color.Success" ToggledIcon="@Icons.Material.Filled.ArrowCircleDown"/>
        </MudTooltip>
    </MudItem>
    <MudItem>
        <MudTooltip Text="Display timestamps in chat">
            <MudToggleIconButton @bind-Toggled="@TimestampsInChat" ToggledIcon="@Icons.Material.Filled.Watch"
                                 ToggledColor="Color.Success" Color="Color.Inherit" Size="Size.Medium" ToggledSize="Size.Medium"
                                 Icon="@Icons.Material.Filled.WatchOff"/>
        </MudTooltip>
    </MudItem>
    <MudItem>
        <MudTooltip Text="Display times in UTC+0">
            <MudToggleIconButton ToggledIcon="@Icons.Material.Filled.EventAvailable"
                                 Icon="@Icons.Material.Filled.EventBusy" @bind-Toggled="@UTCTime"
                                 ToggledColor="Color.Success" Color="Color.Inherit"
                                 Size="Size.Medium" ToggledSize="Size.Medium"/>
        </MudTooltip>
    </MudItem>
    <MudItem>
        <MudTooltip
            Text=@($"Download chat log for {(object?)CurrentChannel ?? "(no channel selected)"}")>

            <MudIconButton Icon="@Icons.Material.Filled.FileDownload" Size="Size.Medium" Color="Color.Inherit"
                           OnClick="@(DownloadChatHistoryAsync)"/>
        </MudTooltip>
    </MudItem>
    @if (DebugUtils.IsDebugBuild())
    {
        <MudItem>
            <MudGrid>
                <MudItem>
                    <MudTextField @bind-Value="_dbg_SimulateMsgCount" T="int" Label="Simulate Messages"/>
                </MudItem>
                <MudItem>
                    <MudIconButton Icon="@Icons.Material.Filled.Send" OnClick="@Dbg_SimulateMessages"/>
                </MudItem>
            </MudGrid>
        </MudItem>
    }
</MudGrid>


@code {
    [Parameter]
    public bool UTCTime { get; set; }
    [Parameter]
    public bool AutoScroll { get; set; } = true;
    [Parameter]
    public bool TimestampsInChat { get; set; } = true;
    [Parameter]
    public IChatChannel? CurrentChannel { get; set; }
    private int _dbg_SimulateMsgCount = 10;
    private string _autoScrollToolTip => AutoScroll ? "AutoScroll (currently enabled)" : "AutoScroll (currently disabled)";
    private async Task OpenChannelDialogAsync() => await DialogService.ShowAsync<AddChannelDialog>("Add Channel");

    private async Task DownloadChatHistoryAsync()
    {
        if (CurrentChannel == null)
        {
            return;
        }

        if (!CurrentChannel.MessageHistory!.Any())
        {
            Snackbar.Add("Download cancelled: no messages to download", Severity.Warning);
            return;
        }

        var timeDelta = CurrentChannel.MessageHistory!.Last!.Value.Timestamp -
                        CurrentChannel.MessageHistory.First!.Value.Timestamp;
        var sb = new StringBuilder($"---- Chat log of {CurrentChannel.ChannelName} generated by Brigitta ----\n");
        var ts = UTCTime ?
            CurrentChannel.MessageHistory!.First!.Value.Timestamp.ToUniversalTime() :
            CurrentChannel.MessageHistory!.First!.Value.Timestamp;
        sb.AppendLine($"---- Log spans {timeDelta.Humanize(3, minUnit: TimeUnit.Second)}, " +
                      $"beginning at {ts:R}{ts:zz} ----");
        sb.AppendLine("---- BEGIN LOG ----");
        foreach (var ircMessage in CurrentChannel.MessageHistory!)
        {
            if (ircMessage is not IPrivateIrcMessage message)
            {
                continue;
            }

            if (UTCTime)
            {
                sb.AppendLine(message.ToUTCDisplayString());
            }
            else
            {
                sb.AppendLine(message.ToDisplayString());
            }
        }
        sb.AppendLine("---- END LOG ----");

        await FileUtils.DownloadAs(JS, $"{DateTime.Now.ToUniversalTime().ToFileTimeString()}-" +
                                       $"{CurrentChannel.ChannelName}.txt",
            Encoding.UTF8.GetBytes(sb.ToString()));
    }

    private void Dbg_SimulateMessages()
    {
        Random rand = new();

        string recipient = "#debug-testing";
        string[] senders =
        {
            "Foo",
            "SomeGuy18",
            "Bar",
            "Baz",
            "Qux",
            "Quux",
            "Corge",
            "Grault",
            "Garply",
            "Waldo",
            "Fred",
            "Plugh",
            "Xyzzy",
            "Thud"
        };
        string[] sampleMessages =
        {
            "Hello world!",
            "This is a test message",
            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
            "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
            "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.",
            "Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
        };
        for (int i = 0; i < _dbg_SimulateMsgCount; i++)
        {
            string sender = senders[rand.Next(senders.Length)];
            string message = sampleMessages[rand.Next(sampleMessages.Length)];
            Client.SimulateMessageReceived(PrivateIrcMessage.CreateFromParameters(sender, recipient, message));
        }
    }

}
