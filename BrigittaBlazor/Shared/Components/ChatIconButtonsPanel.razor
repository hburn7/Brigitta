@using BanchoSharp.Interfaces
@using BanchoSharp.Messaging.ChatMessages
@using BrigittaBlazor.Utils
@inject IJSRuntime JS
@inject IBanchoClient Client
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ILogger<ChatIconButtonsPanel> Logger;

<MudGrid Spacing="1">
    <MudItem>
        <MudTooltip Text="Add channel">
            <MudIconButton Icon="@Icons.Material.Filled.Add" Size="Size.Medium" Color="Color.Success"
                           OnClick="@OpenChannelDialogAsync"/>
        </MudTooltip>
    </MudItem>
    <MudItem>
        <MudTooltip Text="@_autoScrollToolTip">
            <MudToggleIconButton ToggledChanged="@OnAutoScrollToggleChanged"
                                 Toggled="@AutoScroll"
                                 Icon="@Icons.Material.Filled.ArrowDownward"
                                 Size="Size.Medium" ToggledSize="Size.Medium"
                                 ToggledColor="Color.Success" ToggledIcon="@Icons.Material.Filled.ArrowCircleDown"/>
        </MudTooltip>
    </MudItem>
    <MudItem>
        <MudTooltip Text="Display timestamps in chat">
            <MudToggleIconButton ToggledChanged="@OnDisplayTimestampsToggleChanged"
                                 Toggled="@DisplayTimestamps"
                                 ToggledIcon="@Icons.Material.Filled.Watch"
                                 ToggledColor="Color.Success" Color="Color.Inherit" Size="Size.Medium" ToggledSize="Size.Medium"
                                 Icon="@Icons.Material.Filled.WatchOff"/>
        </MudTooltip>
    </MudItem>
    <MudItem>
        <MudTooltip Text="Display times in UTC+0">
            <MudToggleIconButton ToggledChanged="@OnDisplayUTCToggleChanged"
                                 Toggled="@DisplayUTC"
                                 ToggledIcon="@Icons.Material.Filled.EventAvailable"
                                 Icon="@Icons.Material.Filled.EventBusy"
                                 ToggledColor="Color.Success" Color="Color.Inherit"
                                 Size="Size.Medium" ToggledSize="Size.Medium"/>
        </MudTooltip>
    </MudItem>
    <MudItem>
        <MudTooltip
            Text=@($"Download chat log for {(object?)CurrentChannel ?? "(no channel selected)"}")>

            <MudIconButton Icon="@Icons.Material.Filled.FileDownload" Size="Size.Medium" Color="Color.Inherit"
                           OnClick="@(DownloadChatHistoryAsync)"/>
        </MudTooltip>
    </MudItem>
    @if (DebugUtils.IsDebugBuild())
    {
        <MudItem>
            <MudGrid>
                <MudItem>
                    <MudTextField @bind-Value="_dbg_SimulateMsgCount" T="int" Label="Simulate Messages"/>
                </MudItem>
                <MudItem>
                    <MudIconButton Icon="@Icons.Material.Filled.Send" OnClick="@Dbg_SimulateMessages"/>
                </MudItem>
            </MudGrid>
        </MudItem>
    }
</MudGrid>


@code {
    [Parameter]
    public bool AutoScroll { get; set; } = true;
    [Parameter]
    public bool DisplayTimestamps { get; set; } = true;
    [Parameter]
    public bool DisplayUTC { get; set; }
    [Parameter]
    public IChatChannel? CurrentChannel { get; set; }
    [Parameter]
    public EventCallback<bool> AutoScrollChanged { get; set; }
    [Parameter]
    public EventCallback<bool> DisplayTimestampsChanged { get; set; }
    [Parameter]
    public EventCallback<bool> DisplayUTCChanged { get; set; }

    private void OnAutoScrollToggleChanged(bool isToggled)
    {
        AutoScroll = isToggled;
        AutoScrollChanged.InvokeAsync(AutoScroll);
    }

    private void OnDisplayTimestampsToggleChanged(bool isToggled)
    {
        DisplayTimestamps = isToggled;
        DisplayTimestampsChanged.InvokeAsync(DisplayTimestamps);
    }

    private void OnDisplayUTCToggleChanged(bool isToggled)
    {
        DisplayUTC = isToggled;
        DisplayUTCChanged.InvokeAsync(DisplayUTC);
    }

    private int _dbg_SimulateMsgCount = 10;
    private string _autoScrollToolTip => AutoScroll ? "AutoScroll (currently enabled)" : "AutoScroll (currently disabled)";
    private async Task OpenChannelDialogAsync() => await DialogService.ShowAsync<AddChannelDialog>("Add Channel");
    private async Task DownloadChatHistoryAsync() => await FileUtils.SaveChatHistoryAsync(Logger, CurrentChannel, DisplayUTC, JS, Snackbar);

    private void Dbg_SimulateMessages()
    {
        Random rand = new();

        string recipient = "#debug-testing";
        string[] senders =
        {
            "Foo",
            "SomeGuy18",
            "Bar",
            "Baz",
            "Qux",
            "Quux",
            "Corge",
            "Grault",
            "Garply",
            "Waldo",
            "Fred",
            "Plugh",
            "Xyzzy",
            "Thud"
        };
        string[] sampleMessages =
        {
            "Hello world!",
            "This is a test message",
            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
            "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
            "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.",
            "Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
        };
        for (int i = 0; i < _dbg_SimulateMsgCount; i++)
        {
            string sender = senders[rand.Next(senders.Length)];
            string message = sampleMessages[rand.Next(sampleMessages.Length)];
            Client.SimulateMessageReceived(PrivateIrcMessage.CreateFromParameters(sender, recipient, message));
        }
    }

}
